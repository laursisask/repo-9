{"version":3,"file":"validator-ajv6.umd.development.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv from \"ajv\";\nimport isObject from \"lodash/isObject\";\n\nimport { CustomValidatorOptionsType } from \"./types\";\n\nexport const AJV_CONFIG = {\n  errorDataPath: \"property\",\n  allErrors: true,\n  multipleOfPrecision: 8,\n  schemaId: \"auto\",\n  unknownFormats: \"ignore\",\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX =\n  /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 6 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @deprecated in favor of the `@rjsf/validator-ajv8\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType[\"additionalMetaSchemas\"],\n  customFormats?: CustomValidatorOptionsType[\"customFormats\"],\n  ajvOptionsOverrides: CustomValidatorOptionsType[\"ajvOptionsOverrides\"] = {}\n) {\n  const ajv = new Ajv({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n\n  // add custom formats\n  ajv.addFormat(\"data-url\", DATA_URL_FORMAT_REGEX);\n  ajv.addFormat(\"color\", COLOR_FORMAT_REGEX);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import { Ajv, ErrorObject } from \"ajv\";\nimport toPath from \"lodash/toPath\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorSchemaBuilder,\n  ErrorTransformer,\n  FieldValidation,\n  FormContextType,\n  FormValidation,\n  GenericObjectType,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  getDefaultFormState,\n  isObject,\n  mergeValidationData,\n  ERRORS_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType } from \"./types\";\nimport createAjvInstance from \"./createAjvInstance\";\n\nconst ROOT_SCHEMA_PREFIX = \"__rjsf_rootSchema\";\n\n/** `ValidatorType` implementation that uses the AJV 6 validation mechanism.\n *\n * @deprecated in favor of the `@rjsf/validator-ajv8\n */\nexport default class AJV6Validator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> implements ValidatorType<T, S, F>\n{\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** Constructs an `AJV6Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   */\n  constructor(options: CustomValidatorOptionsType) {\n    const { additionalMetaSchemas, customFormats, ajvOptionsOverrides } =\n      options;\n    this.ajv = createAjvInstance(\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides\n    );\n  }\n\n  /** Transforms a ajv validation errors list:\n   * [\n   *   {property: '.level1.level2[2].level3', message: 'err a'},\n   *   {property: '.level1.level2[2].level3', message: 'err b'},\n   *   {property: '.level1.level2[4].level3', message: 'err b'},\n   * ]\n   * Into an error tree:\n   * {\n   *   level1: {\n   *     level2: {\n   *       2: {level3: {errors: ['err a', 'err b']}},\n   *       4: {level3: {errors: ['err b']}},\n   *     }\n   *   }\n   * };\n   *\n   * @param errors - The list of RJSFValidationError objects\n   * @private\n   */\n  private toErrorSchema(errors: RJSFValidationError[]): ErrorSchema<T> {\n    const builder = new ErrorSchemaBuilder<T>();\n    if (errors.length) {\n      errors.forEach((error) => {\n        const { property, message } = error;\n        const path = toPath(property);\n\n        // If the property is at the root (.level1) then toPath creates\n        // an empty array element at the first index. Remove it.\n        if (path.length > 0 && path[0] === \"\") {\n          path.splice(0, 1);\n        }\n        if (message) {\n          builder.addErrors(message, path);\n        }\n      });\n    }\n    return builder.ErrorSchema;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    if (!errorSchema) {\n      return [];\n    }\n    let errorList: RJSFValidationError[] = [];\n    if (ERRORS_KEY in errorSchema) {\n      errorList = errorList.concat(\n        errorSchema.__errors!.map((message: string) => {\n          const property = `.${fieldPath.join(\".\")}`;\n          return {\n            property,\n            message,\n            stack: `${property} ${message}`,\n          };\n        })\n      );\n    }\n    return Object.keys(errorSchema).reduce((acc, key) => {\n      if (key !== ERRORS_KEY) {\n        acc = acc.concat(\n          this.toErrorList((errorSchema as GenericObjectType)[key], [\n            ...fieldPath,\n            key,\n          ])\n        );\n      }\n      return acc;\n    }, errorList);\n  }\n\n  /** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n   *\n   * @param formData - The form data around which the error handler is created\n   * @private\n   */\n  private createErrorHandler(formData: T): FormValidation<T> {\n    const handler: FieldValidation = {\n      // We store the list of errors for this node in a property named __errors\n      // to avoid name collision with a possible sub schema field named\n      // 'errors' (see `utils.toErrorSchema`).\n      __errors: [],\n      addError(message: string) {\n        this.__errors!.push(message);\n      },\n    };\n    if (isObject(formData)) {\n      const formObject: GenericObjectType = formData as GenericObjectType;\n      return Object.keys(formObject).reduce((acc, key) => {\n        return { ...acc, [key]: this.createErrorHandler(formObject[key]) };\n      }, handler as FormValidation<T>);\n    }\n    if (Array.isArray(formData)) {\n      return formData.reduce((acc, value, key) => {\n        return { ...acc, [key]: this.createErrorHandler(value) };\n      }, handler);\n    }\n    return handler as FormValidation<T>;\n  }\n\n  /** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError` functions from it\n   *\n   * @param errorHandler - The `FormValidation` error handling structure\n   * @private\n   */\n  private unwrapErrorHandler(errorHandler: FormValidation<T>): ErrorSchema<T> {\n    return Object.keys(errorHandler).reduce((acc, key) => {\n      if (key === \"addError\") {\n        return acc;\n      } else if (key === ERRORS_KEY) {\n        return { ...acc, [key]: (errorHandler as GenericObjectType)[key] };\n      }\n      return {\n        ...acc,\n        [key]: this.unwrapErrorHandler(\n          (errorHandler as GenericObjectType)[key]\n        ),\n      };\n    }, {} as ErrorSchema<T>);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @private\n   */\n  private transformRJSFValidationErrors(\n    errors: ErrorObject[] = []\n  ): RJSFValidationError[] {\n    return errors.map((e: ErrorObject) => {\n      const { dataPath, keyword, message, params, schemaPath } = e;\n      const property = `${dataPath}`;\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack: `${property} ${message}`.trim(),\n        schemaPath,\n      };\n    });\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   */\n  rawValidation<Result = any>(\n    schema: RJSFSchema,\n    formData?: T\n  ): { errors?: Result[]; validationError?: Error } {\n    let validationError: Error | undefined = undefined;\n    try {\n      this.ajv.validate(schema, formData);\n    } catch (err) {\n      validationError = err as Error;\n    }\n\n    const errors = this.ajv.errors || undefined;\n\n    // Clear errors to prevent persistent errors, see #1104\n    this.ajv.errors = null;\n\n    return { errors: errors as unknown as Result[], validationError };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T, S, F>,\n    transformErrors?: ErrorTransformer<T, S, F>,\n    uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    const rootSchema = schema;\n\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    const { validationError } = rawErrors;\n    let errors = this.transformRJSFValidationErrors(rawErrors.errors);\n\n    const noProperMetaSchema =\n      validationError &&\n      validationError.message &&\n      validationError.message.includes(\"no schema with key or ref \");\n\n    if (noProperMetaSchema) {\n      errors = [...errors, { stack: validationError!.message }];\n    }\n    if (typeof transformErrors === \"function\") {\n      errors = transformErrors(errors, uiSchema);\n    }\n\n    let errorSchema = this.toErrorSchema(errors);\n\n    if (noProperMetaSchema) {\n      errorSchema = {\n        ...errorSchema,\n        ...{\n          $schema: {\n            __errors: [validationError!.message],\n          },\n        },\n      };\n    }\n\n    if (typeof customValidate !== \"function\") {\n      return { errors, errorSchema };\n    }\n\n    // Include form data with undefined values, which is required for custom validation.\n    const newFormData = getDefaultFormState<T, S, F>(\n      this,\n      schema,\n      formData,\n      rootSchema,\n      true\n    ) as T;\n\n    const errorHandler = customValidate(\n      newFormData,\n      this.createErrorHandler(newFormData),\n      uiSchema\n    );\n    const userErrorSchema = this.unwrapErrorHandler(errorHandler);\n    return mergeValidationData<T, S, F>(\n      this,\n      { errors, errorSchema },\n      userErrorSchema\n    );\n  }\n\n  /** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixObject(node: object) {\n    for (const key in node) {\n      const realObj: { [k: string]: any } = node;\n      const value = realObj[key];\n      if (\n        key === REF_KEY &&\n        typeof value === \"string\" &&\n        value.startsWith(\"#\")\n      ) {\n        realObj[key] = ROOT_SCHEMA_PREFIX + value;\n      } else {\n        realObj[key] = this.withIdRefPrefix(value);\n      }\n    }\n    return node;\n  }\n\n  /** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixArray(node: object[]): RJSFSchema {\n    for (let i = 0; i < node.length; i++) {\n      node[i] = this.withIdRefPrefix(node[i]);\n    }\n    return node as RJSFSchema;\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData- - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: RJSFSchema, formData: T | undefined, rootSchema: RJSFSchema) {\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      const result = this.ajv\n        .addSchema(rootSchema, ROOT_SCHEMA_PREFIX)\n        .validate(this.withIdRefPrefix(schema), formData);\n      return result as boolean;\n    } catch (e) {\n      return false;\n    } finally {\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(ROOT_SCHEMA_PREFIX);\n    }\n  }\n\n  /** Recursively prefixes all $ref's in a schema with `ROOT_SCHEMA_PREFIX`\n   * This is used in isValid to make references to the rootSchema\n   *\n   * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @protected\n   */\n  protected withIdRefPrefix(schemaNode: RJSFSchema): RJSFSchema {\n    if (schemaNode.constructor === Object) {\n      return this.withIdRefPrefixObject({ ...schemaNode });\n    }\n    if (Array.isArray(schemaNode)) {\n      return this.withIdRefPrefixArray([...schemaNode]);\n    }\n    return schemaNode;\n  }\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType } from \"./types\";\nimport AJV6Validator from \"./validator\";\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @deprecated in favor of the `@rjsf/validator-ajv8\n */\nexport default function customizeValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(options: CustomValidatorOptionsType = {}): ValidatorType<T, S, F> {\n  return new AJV6Validator<T, S, F>(options);\n}\n","import customizeValidator from \"./customizeValidator\";\n\nexport { customizeValidator };\nexport * from \"./types\";\n\n/** @deprecated in favor of the `@rjsf/validator-ajv8\n */\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","errorDataPath","allErrors","multipleOfPrecision","schemaId","unknownFormats","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajv","Ajv","addFormat","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","ROOT_SCHEMA_PREFIX","AJV6Validator","options","toErrorSchema","errors","builder","ErrorSchemaBuilder","length","error","property","message","path","toPath","splice","addErrors","ErrorSchema","toErrorList","errorSchema","fieldPath","errorList","ERRORS_KEY","concat","__errors","map","join","stack","reduce","acc","key","createErrorHandler","formData","handler","addError","push","formObject","value","unwrapErrorHandler","errorHandler","transformRJSFValidationErrors","e","dataPath","keyword","params","schemaPath","name","trim","rawValidation","schema","validationError","undefined","validate","err","validateFormData","customValidate","transformErrors","uiSchema","rootSchema","rawErrors","noProperMetaSchema","includes","$schema","newFormData","getDefaultFormState","userErrorSchema","mergeValidationData","withIdRefPrefixObject","node","realObj","REF_KEY","startsWith","withIdRefPrefix","withIdRefPrefixArray","i","isValid","result","addSchema","removeSchema","schemaNode","constructor","customizeValidator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;EAKO,IAAMA,UAAU,GAAG;EACxBC,EAAAA,aAAa,EAAE,UAAU;EACzBC,EAAAA,SAAS,EAAE,IAAI;EACfC,EAAAA,mBAAmB,EAAE,CAAC;EACtBC,EAAAA,QAAQ,EAAE,MAAM;EAChBC,EAAAA,cAAc,EAAE,QAAA;GACR,CAAA;EACH,IAAMC,kBAAkB,GAC7B,4YAA4Y,CAAA;EACvY,IAAMC,qBAAqB,GAChC,2DAA2D,CAAA;EAE7D;;;;;;;;;;EAUG;EACW,SAAUC,iBAAiB,CACvCC,qBAA2E,EAC3EC,aAA2D,EAC3DC,mBAAA,EAA2E;EAAA,EAAA,IAA3EA,mBAAA,KAAA,KAAA,CAAA,EAAA;MAAAA,mBAAA,GAAyE,EAAE,CAAA;EAAA,GAAA;IAE3E,IAAMC,GAAG,GAAG,IAAIC,uBAAG,cAAMb,UAAU,EAAKW,mBAAmB,CAAG,CAAA,CAAA;EAE9D;EACAC,EAAAA,GAAG,CAACE,SAAS,CAAC,UAAU,EAAEP,qBAAqB,CAAC,CAAA;EAChDK,EAAAA,GAAG,CAACE,SAAS,CAAC,OAAO,EAAER,kBAAkB,CAAC,CAAA;EAE1C;EACA,EAAA,IAAIS,KAAK,CAACC,OAAO,CAACP,qBAAqB,CAAC,EAAE;EACxCG,IAAAA,GAAG,CAACK,aAAa,CAACR,qBAAqB,CAAC,CAAA;EACzC,GAAA;EAED;EACA,EAAA,IAAIS,4BAAQ,CAACR,aAAa,CAAC,EAAE;MAC3BS,MAAM,CAACC,IAAI,CAACV,aAAa,CAAC,CAACW,OAAO,CAAC,UAACC,UAAU,EAAI;QAChDV,GAAG,CAACE,SAAS,CAACQ,UAAU,EAAEZ,aAAa,CAACY,UAAU,CAAC,CAAC,CAAA;EACtD,KAAC,CAAC,CAAA;EACH,GAAA;EAED,EAAA,OAAOV,GAAG,CAAA;EACZ;;ECzBA,IAAMW,kBAAkB,GAAG,mBAAmB,CAAA;EAE9C;;;EAGG;EAHH,IAIqBC,aAAa,gBAAA,YAAA;EAMhC;;;EAGG;;EAGH;;;EAGG;EACH,EAAA,SAAA,aAAA,CAAYC,OAAmC,EAAA;EAAA,IAAA,IAAA,CANvCb,GAAG,GAAA,KAAA,CAAA,CAAA;EAOT,IAAA,IAAQH,qBAAqB,GAC3BgB,OAAO,CADDhB,qBAAqB;QAAEC,aAAa,GAC1Ce,OAAO,CADsBf,aAAa;QAAEC,mBAAmB,GAC/Dc,OAAO,CADqCd,mBAAmB,CAAA;MAEjE,IAAI,CAACC,GAAG,GAAGJ,iBAAiB,CAC1BC,qBAAqB,EACrBC,aAAa,EACbC,mBAAmB,CACpB,CAAA;EACH,GAAA;EAEA;;;;;;;;;;;;;;;;;;EAkBG;EAlBH,EAAA,IAAA,MAAA,GAAA,aAAA,CAAA,SAAA,CAAA;EAAA,EAAA,MAAA,CAmBQe,aAAa,GAAb,SAAcC,aAAAA,CAAAA,MAA6B,EAAA;EACjD,IAAA,IAAMC,OAAO,GAAG,IAAIC,wBAAkB,EAAK,CAAA;MAC3C,IAAIF,MAAM,CAACG,MAAM,EAAE;EACjBH,MAAAA,MAAM,CAACN,OAAO,CAAC,UAACU,KAAK,EAAI;EACvB,QAAA,IAAQC,QAAQ,GAAcD,KAAK,CAA3BC,QAAQ;YAAEC,OAAO,GAAKF,KAAK,CAAjBE,OAAO,CAAA;EACzB,QAAA,IAAMC,IAAI,GAAGC,0BAAM,CAACH,QAAQ,CAAC,CAAA;EAE7B;EACA;EACA,QAAA,IAAIE,IAAI,CAACJ,MAAM,GAAG,CAAC,IAAII,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;EACrCA,UAAAA,IAAI,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;EAClB,SAAA;EACD,QAAA,IAAIH,OAAO,EAAE;EACXL,UAAAA,OAAO,CAACS,SAAS,CAACJ,OAAO,EAAEC,IAAI,CAAC,CAAA;EACjC,SAAA;EACH,OAAC,CAAC,CAAA;EACH,KAAA;MACD,OAAON,OAAO,CAACU,WAAW,CAAA;EAC5B,GAAA;EAEA;;;;EAIG,MAJH;EAAA,EAAA,MAAA,CAKAC,WAAW,GAAX,SAAA,WAAA,CAAYC,WAA4B,EAAEC,SAAA,EAAwB;EAAA,IAAA,IAAA,KAAA,GAAA,IAAA,CAAA;EAAA,IAAA,IAAxBA,SAAA,KAAA,KAAA,CAAA,EAAA;EAAAA,MAAAA,SAAA,GAAsB,EAAE,CAAA;EAAA,KAAA;MAChE,IAAI,CAACD,WAAW,EAAE;EAChB,MAAA,OAAO,EAAE,CAAA;EACV,KAAA;MACD,IAAIE,SAAS,GAA0B,EAAE,CAAA;MACzC,IAAIC,gBAAU,IAAIH,WAAW,EAAE;EAC7BE,MAAAA,SAAS,GAAGA,SAAS,CAACE,MAAM,CAC1BJ,WAAW,CAACK,QAAS,CAACC,GAAG,CAAC,UAACb,OAAe,EAAI;EAC5C,QAAA,IAAMD,QAAQ,GAAOS,GAAAA,GAAAA,SAAS,CAACM,IAAI,CAAC,GAAG,CAAG,CAAA;UAC1C,OAAO;EACLf,UAAAA,QAAQ,EAARA,QAAQ;EACRC,UAAAA,OAAO,EAAPA,OAAO;YACPe,KAAK,EAAKhB,QAAQ,GAAIC,GAAAA,GAAAA,OAAAA;WACvB,CAAA;EACH,OAAC,CAAC,CACH,CAAA;EACF,KAAA;EACD,IAAA,OAAOd,MAAM,CAACC,IAAI,CAACoB,WAAW,CAAC,CAACS,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAI;QAClD,IAAIA,GAAG,KAAKR,gBAAU,EAAE;EACtBO,QAAAA,GAAG,GAAGA,GAAG,CAACN,MAAM,CACd,KAAI,CAACL,WAAW,CAAEC,WAAiC,CAACW,GAAG,CAAC,EAAA,EAAA,CAAA,MAAA,CACnDV,SAAS,EACZU,CAAAA,GAAG,GACH,CACH,CAAA;EACF,OAAA;EACD,MAAA,OAAOD,GAAG,CAAA;OACX,EAAER,SAAS,CAAC,CAAA;EACf,GAAA;EAEA;;;;EAIG,MAJH;EAAA,EAAA,MAAA,CAKQU,kBAAkB,GAAlB,SAAmBC,kBAAAA,CAAAA,QAAW,EAAA;EAAA,IAAA,IAAA,MAAA,GAAA,IAAA,CAAA;EACpC,IAAA,IAAMC,OAAO,GAAoB;EAC/B;EACA;EACA;EACAT,MAAAA,QAAQ,EAAE,EAAE;QACZU,QAAQ,EAAA,SAAA,QAAA,CAACtB,OAAe,EAAA;EACtB,QAAA,IAAI,CAACY,QAAS,CAACW,IAAI,CAACvB,OAAO,CAAC,CAAA;EAC9B,OAAA;OACD,CAAA;EACD,IAAA,IAAIf,cAAQ,CAACmC,QAAQ,CAAC,EAAE;QACtB,IAAMI,UAAU,GAAsBJ,QAA6B,CAAA;EACnE,MAAA,OAAOlC,MAAM,CAACC,IAAI,CAACqC,UAAU,CAAC,CAACR,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAI;EAAA,QAAA,IAAA,SAAA,CAAA;EACjD,QAAA,OAAA,QAAA,CAAA,EAAA,EAAYD,GAAG,GAAA,SAAA,GAAA,EAAA,EAAA,SAAA,CAAGC,GAAG,CAAA,GAAG,MAAI,CAACC,kBAAkB,CAACK,UAAU,CAACN,GAAG,CAAC,CAAC,EAAA,SAAA,EAAA,CAAA;SACjE,EAAEG,OAA4B,CAAC,CAAA;EACjC,KAAA;EACD,IAAA,IAAIvC,KAAK,CAACC,OAAO,CAACqC,QAAQ,CAAC,EAAE;QAC3B,OAAOA,QAAQ,CAACJ,MAAM,CAAC,UAACC,GAAG,EAAEQ,KAAK,EAAEP,GAAG,EAAI;EAAA,QAAA,IAAA,SAAA,CAAA;UACzC,OAAYD,QAAAA,CAAAA,EAAAA,EAAAA,GAAG,6BAAGC,GAAG,CAAA,GAAG,MAAI,CAACC,kBAAkB,CAACM,KAAK,CAAC,EAAA,SAAA,EAAA,CAAA;SACvD,EAAEJ,OAAO,CAAC,CAAA;EACZ,KAAA;EACD,IAAA,OAAOA,OAA4B,CAAA;EACrC,GAAA;EAEA;;;;EAIG,MAJH;EAAA,EAAA,MAAA,CAKQK,kBAAkB,GAAlB,SAAmBC,kBAAAA,CAAAA,YAA+B,EAAA;EAAA,IAAA,IAAA,MAAA,GAAA,IAAA,CAAA;EACxD,IAAA,OAAOzC,MAAM,CAACC,IAAI,CAACwC,YAAY,CAAC,CAACX,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAI;EAAA,MAAA,IAAA,SAAA,CAAA;QACnD,IAAIA,GAAG,KAAK,UAAU,EAAE;EACtB,QAAA,OAAOD,GAAG,CAAA;EACX,OAAA,MAAM,IAAIC,GAAG,KAAKR,gBAAU,EAAE;EAAA,QAAA,IAAA,SAAA,CAAA;EAC7B,QAAA,OAAA,QAAA,CAAA,EAAA,EAAYO,GAAG,GAAGC,SAAAA,GAAAA,EAAAA,EAAAA,SAAAA,CAAAA,GAAG,IAAIS,YAAkC,CAACT,GAAG,CAAC,EAAA,SAAA,EAAA,CAAA;EACjE,OAAA;EACD,MAAA,OAAA,QAAA,CAAA,EAAA,EACKD,GAAG,GAAA,SAAA,GAAA,EAAA,EAAA,SAAA,CACLC,GAAG,CAAA,GAAG,MAAI,CAACQ,kBAAkB,CAC3BC,YAAkC,CAACT,GAAG,CAAC,CACzC,EAAA,SAAA,EAAA,CAAA;OAEJ,EAAE,EAAoB,CAAC,CAAA;EAC1B,GAAA;EAEA;;;;;EAKG,MALH;EAAA,EAAA,MAAA,CAMQU,6BAA6B,GAA7B,SACNlC,6BAAAA,CAAAA,QAA0B;EAAA,IAAA,IAA1BA;EAAAA,MAAAA,SAAwB,EAAE,CAAA;EAAA,KAAA;EAE1B,IAAA,OAAOA,MAAM,CAACmB,GAAG,CAAC,UAACgB,CAAc,EAAI;EACnC,MAAA,IAAQC,QAAQ,GAA2CD,CAAC,CAApDC,QAAQ;UAAEC,OAAO,GAAkCF,CAAC,CAA1CE,OAAO;UAAE/B,OAAO,GAAyB6B,CAAC,CAAjC7B,OAAO;UAAEgC,MAAM,GAAiBH,CAAC,CAAxBG,MAAM;UAAEC,UAAU,GAAKJ,CAAC,CAAhBI,UAAU,CAAA;QACtD,IAAMlC,QAAQ,QAAM+B,QAAU,CAAA;EAE9B;QACA,OAAO;EACLI,QAAAA,IAAI,EAAEH,OAAO;EACbhC,QAAAA,QAAQ,EAARA,QAAQ;EACRC,QAAAA,OAAO,EAAPA,OAAO;EACPgC,QAAAA,MAAM,EAANA,MAAM;EACNjB,QAAAA,KAAK,EAAE,CAAGhB,QAAQ,SAAIC,OAAO,EAAGmC,IAAI,EAAE;EACtCF,QAAAA,UAAU,EAAVA,UAAAA;SACD,CAAA;EACH,KAAC,CAAC,CAAA;EACJ,GAAA;EAEA;;;;;EAKG,MALH;EAAA,EAAA,MAAA,CAMAG,aAAa,GAAb,SAAA,aAAA,CACEC,MAAkB,EAClBjB,QAAY,EAAA;MAEZ,IAAIkB,eAAe,GAAsBC,SAAS,CAAA;MAClD,IAAI;QACF,IAAI,CAAC5D,GAAG,CAAC6D,QAAQ,CAACH,MAAM,EAAEjB,QAAQ,CAAC,CAAA;OACpC,CAAC,OAAOqB,GAAG,EAAE;EACZH,MAAAA,eAAe,GAAGG,GAAY,CAAA;EAC/B,KAAA;MAED,IAAM/C,MAAM,GAAG,IAAI,CAACf,GAAG,CAACe,MAAM,IAAI6C,SAAS,CAAA;EAE3C;EACA,IAAA,IAAI,CAAC5D,GAAG,CAACe,MAAM,GAAG,IAAI,CAAA;MAEtB,OAAO;EAAEA,MAAAA,MAAM,EAAEA,MAA6B;EAAE4C,MAAAA,eAAe,EAAfA,eAAAA;OAAiB,CAAA;EACnE,GAAA;EAEA;;;;;;;;;;EAUG,MAVH;EAAA,EAAA,MAAA,CAWAI,gBAAgB,GAAhB,SACEtB,gBAAAA,CAAAA,QAAuB,EACvBiB,MAAS,EACTM,cAAyC,EACzCC,eAA2C,EAC3CC,QAA4B,EAAA;MAE5B,IAAMC,UAAU,GAAGT,MAAM,CAAA;MAEzB,IAAMU,SAAS,GAAG,IAAI,CAACX,aAAa,CAAcC,MAAM,EAAEjB,QAAQ,CAAC,CAAA;EACnE,IAAA,IAAQkB,eAAe,GAAKS,SAAS,CAA7BT,eAAe,CAAA;MACvB,IAAI5C,MAAM,GAAG,IAAI,CAACkC,6BAA6B,CAACmB,SAAS,CAACrD,MAAM,CAAC,CAAA;EAEjE,IAAA,IAAMsD,kBAAkB,GACtBV,eAAe,IACfA,eAAe,CAACtC,OAAO,IACvBsC,eAAe,CAACtC,OAAO,CAACiD,QAAQ,CAAC,4BAA4B,CAAC,CAAA;EAEhE,IAAA,IAAID,kBAAkB,EAAE;QACtBtD,MAAM,GAAA,EAAA,CAAA,MAAA,CAAOA,MAAM,EAAE,CAAA;UAAEqB,KAAK,EAAEuB,eAAgB,CAACtC,OAAAA;EAAO,OAAE,CAAC,CAAA,CAAA;EAC1D,KAAA;EACD,IAAA,IAAI,OAAO4C,eAAe,KAAK,UAAU,EAAE;EACzClD,MAAAA,MAAM,GAAGkD,eAAe,CAAClD,MAAM,EAAEmD,QAAQ,CAAC,CAAA;EAC3C,KAAA;EAED,IAAA,IAAItC,WAAW,GAAG,IAAI,CAACd,aAAa,CAACC,MAAM,CAAC,CAAA;EAE5C,IAAA,IAAIsD,kBAAkB,EAAE;QACtBzC,WAAW,GAAA,QAAA,CAAA,EAAA,EACNA,WAAW,EACX;EACD2C,QAAAA,OAAO,EAAE;EACPtC,UAAAA,QAAQ,EAAE,CAAC0B,eAAgB,CAACtC,OAAO,CAAA;EACpC,SAAA;EACF,OAAA,CACF,CAAA;EACF,KAAA;EAED,IAAA,IAAI,OAAO2C,cAAc,KAAK,UAAU,EAAE;QACxC,OAAO;EAAEjD,QAAAA,MAAM,EAANA,MAAM;EAAEa,QAAAA,WAAW,EAAXA,WAAAA;SAAa,CAAA;EAC/B,KAAA;EAED;EACA,IAAA,IAAM4C,WAAW,GAAGC,yBAAmB,CACrC,IAAI,EACJf,MAAM,EACNjB,QAAQ,EACR0B,UAAU,EACV,IAAI,CACA,CAAA;EAEN,IAAA,IAAMnB,YAAY,GAAGgB,cAAc,CACjCQ,WAAW,EACX,IAAI,CAAChC,kBAAkB,CAACgC,WAAW,CAAC,EACpCN,QAAQ,CACT,CAAA;EACD,IAAA,IAAMQ,eAAe,GAAG,IAAI,CAAC3B,kBAAkB,CAACC,YAAY,CAAC,CAAA;MAC7D,OAAO2B,yBAAmB,CACxB,IAAI,EACJ;EAAE5D,MAAAA,MAAM,EAANA,MAAM;EAAEa,MAAAA,WAAW,EAAXA,WAAAA;OAAa,EACvB8C,eAAe,CAChB,CAAA;EACH,GAAA;EAEA;;;;;EAKG,MALH;EAAA,EAAA,MAAA,CAMQE,qBAAqB,GAArB,SAAsBC,qBAAAA,CAAAA,IAAY,EAAA;EACxC,IAAA,KAAK,IAAMtC,GAAG,IAAIsC,IAAI,EAAE;QACtB,IAAMC,OAAO,GAAyBD,IAAI,CAAA;EAC1C,MAAA,IAAM/B,KAAK,GAAGgC,OAAO,CAACvC,GAAG,CAAC,CAAA;EAC1B,MAAA,IACEA,GAAG,KAAKwC,aAAO,IACf,OAAOjC,KAAK,KAAK,QAAQ,IACzBA,KAAK,CAACkC,UAAU,CAAC,GAAG,CAAC,EACrB;EACAF,QAAAA,OAAO,CAACvC,GAAG,CAAC,GAAG5B,kBAAkB,GAAGmC,KAAK,CAAA;EAC1C,OAAA,MAAM;UACLgC,OAAO,CAACvC,GAAG,CAAC,GAAG,IAAI,CAAC0C,eAAe,CAACnC,KAAK,CAAC,CAAA;EAC3C,OAAA;EACF,KAAA;EACD,IAAA,OAAO+B,IAAI,CAAA;EACb,GAAA;EAEA;;;;;EAKG,MALH;EAAA,EAAA,MAAA,CAMQK,oBAAoB,GAApB,SAAqBL,oBAAAA,CAAAA,IAAc,EAAA;EACzC,IAAA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAAC3D,MAAM,EAAEiE,CAAC,EAAE,EAAE;EACpCN,MAAAA,IAAI,CAACM,CAAC,CAAC,GAAG,IAAI,CAACF,eAAe,CAACJ,IAAI,CAACM,CAAC,CAAC,CAAC,CAAA;EACxC,KAAA;EACD,IAAA,OAAON,IAAkB,CAAA;EAC3B,GAAA;EAEA;;;;;;;EAOG,MAPH;IAAA,MAQAO,CAAAA,OAAO,GAAP,SAAQ1B,OAAAA,CAAAA,MAAkB,EAAEjB,QAAuB,EAAE0B,UAAsB,EAAA;MACzE,IAAI;EACF;EACA;EACA;EACA;QACA,IAAMkB,MAAM,GAAG,IAAI,CAACrF,GAAG,CACpBsF,SAAS,CAACnB,UAAU,EAAExD,kBAAkB,CAAC,CACzCkD,QAAQ,CAAC,IAAI,CAACoB,eAAe,CAACvB,MAAM,CAAC,EAAEjB,QAAQ,CAAC,CAAA;EACnD,MAAA,OAAO4C,MAAiB,CAAA;OACzB,CAAC,OAAOnC,CAAC,EAAE;EACV,MAAA,OAAO,KAAK,CAAA;EACb,KAAA,SAAS;EACR;EACA,MAAA,IAAI,CAAClD,GAAG,CAACuF,YAAY,CAAC5E,kBAAkB,CAAC,CAAA;EAC1C,KAAA;EACH,GAAA;EAEA;;;;;EAKG,MALH;EAAA,EAAA,MAAA,CAMUsE,eAAe,GAAf,SAAgBO,eAAAA,CAAAA,UAAsB,EAAA;EAC9C,IAAA,IAAIA,UAAU,CAACC,WAAW,KAAKlF,MAAM,EAAE;EACrC,MAAA,OAAO,IAAI,CAACqE,qBAAqB,CAAA,QAAA,CAAA,EAAA,EAAMY,UAAU,CAAG,CAAA,CAAA;EACrD,KAAA;EACD,IAAA,IAAIrF,KAAK,CAACC,OAAO,CAACoF,UAAU,CAAC,EAAE;EAC7B,MAAA,OAAO,IAAI,CAACN,oBAAoB,CAAA,EAAA,CAAA,MAAA,CAAKM,UAAU,CAAE,CAAA,CAAA;EAClD,KAAA;EACD,IAAA,OAAOA,UAAU,CAAA;KAClB,CAAA;EAAA,EAAA,OAAA,aAAA,CAAA;EAAA,CAAA,EAAA;;ECtXH;;;;;EAKG;EACW,SAAUE,kBAAkB,CAIxC7E,SAAwC;EAAA,EAAA,IAAxCA;MAAAA,UAAsC,EAAE,CAAA;EAAA,GAAA;EACxC,EAAA,OAAO,IAAID,aAAa,CAAUC,OAAO,CAAC,CAAA;EAC5C;;ECjBA;EACG;AACH,cAAA,aAAe6E,kBAAkB,EAAE;;;;;;;;;;;"}