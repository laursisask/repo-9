{"version":3,"file":"semantic-ui.cjs.production.min.js","sources":["../src/AddButton/AddButton.tsx","../src/util.tsx","../src/ArrayFieldItemTemplate/ArrayFieldItemTemplate.tsx","../src/ArrayFieldTemplate/ArrayFieldTemplate.tsx","../src/BaseInputTemplate/BaseInputTemplate.tsx","../src/DescriptionField/DescriptionField.tsx","../src/ErrorList/ErrorList.tsx","../src/IconButton/IconButton.tsx","../src/FieldErrorTemplate/FieldErrorTemplate.tsx","../src/FieldHelpTemplate/FieldHelpTemplate.tsx","../src/FieldTemplate/FieldTemplate.tsx","../src/ObjectFieldTemplate/ObjectFieldTemplate.tsx","../src/SubmitButton/SubmitButton.tsx","../src/TitleField/TitleField.tsx","../src/WrapIfAdditionalTemplate/WrapIfAdditionalTemplate.tsx","../src/Templates/Templates.ts","../src/CheckboxWidget/CheckboxWidget.tsx","../src/CheckboxesWidget/CheckboxesWidget.tsx","../src/RadioWidget/RadioWidget.tsx","../src/RangeWidget/RangeWidget.tsx","../src/SelectWidget/SelectWidget.tsx","../src/TextareaWidget/TextareaWidget.tsx","../src/Widgets/Widgets.tsx","../src/Theme/Theme.ts","../src/SemanticUIForm/SemanticUIForm.ts"],"sourcesContent":["import React from \"react\";\nimport { Button, Icon, ButtonProps } from \"semantic-ui-react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema, registry, color, ...props }: IconButtonProps<T, S, F>) {\n  return (\n    <Button\n      title=\"Add Item\"\n      color={color as ButtonProps[\"color\"]}\n      {...props}\n      icon\n      size=\"tiny\"\n    >\n      <Icon name=\"plus\" />\n    </Button>\n  );\n}\n","import React from \"react\";\nimport {\n  UiSchema,\n  GenericObjectType,\n  getUiOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n} from \"@rjsf/utils\";\n\nexport type SemanticPropsTypes<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = {\n  formContext?: F;\n  uiSchema?: UiSchema<T, S, F>;\n  options?: UIOptionsType<T, S, F>;\n  defaultSchemaProps?: GenericObjectType;\n  defaultContextProps?: GenericObjectType;\n};\n\nexport type SemanticErrorPropsType<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = {\n  formContext?: F;\n  uiSchema?: UiSchema<T, S, F>;\n  options?: UIOptionsType<T, S, F>;\n  defaultProps?: GenericObjectType;\n};\n\nexport type WrapProps = GenericObjectType & {\n  wrap: boolean;\n  component?: React.ElementType;\n};\n\n/**\n * Extract props meant for semantic UI components from props that are\n * passed to Widgets, Templates and Fields.\n * @param {Object} params\n * @param {Object?} params.formContext\n * @param {Object?} params.uiSchema\n * @param {Object?} params.options\n * @param {Object?} params.defaultSchemaProps\n * @param {Object?} params.defaultContextProps\n * @returns {any}\n */\nexport function getSemanticProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  formContext = {} as F,\n  uiSchema = {},\n  options = {},\n  defaultSchemaProps = { fluid: true, inverted: false },\n  defaultContextProps = {},\n}: SemanticPropsTypes<T, S, F>) {\n  const formContextProps = formContext.semantic;\n  const schemaProps = getUiOptions<T, S, F>(uiSchema).semantic;\n  const optionProps = options.semantic;\n  // formContext props should overide other props\n  return Object.assign(\n    {},\n    { ...defaultSchemaProps },\n    { ...defaultContextProps },\n    schemaProps,\n    optionProps,\n    formContextProps\n  );\n}\n\n/**\n * Extract error props meant for semantic UI components from props that are\n * passed to Widgets, Templates and Fields.\n * @param {Object} params\n * @param {Object?} params.formContext\n * @param {Object?} params.uiSchema\n * @param {Object?} params.defaultProps\n * @returns {any}\n */\nexport function getSemanticErrorProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  formContext = {} as F,\n  uiSchema = {},\n  options = {},\n  defaultProps = { size: \"small\", pointing: \"above\" },\n}: SemanticErrorPropsType<T, S, F>) {\n  const formContextProps =\n    formContext.semantic && formContext.semantic.errorOptions;\n  const semanticOptions: GenericObjectType = getUiOptions<T, S, F>(uiSchema)\n    .semantic as GenericObjectType;\n  const schemaProps = semanticOptions && semanticOptions.errorOptions;\n  const optionProps =\n    options.semantic && (options.semantic as GenericObjectType).errorOptions;\n\n  return Object.assign(\n    {},\n    { ...defaultProps },\n    schemaProps,\n    optionProps,\n    formContextProps\n  );\n}\n\n/**\n * Combine multiple strings containing class names into a single string,\n * removing duplicates. E.g.\n * cleanClassNames('bar', 'baz bar', 'x y ', undefined)\n * // 'bar baz x y'\n * @param {Array} classNameArr\n * @param {Array} omit\n * @returns {string}\n */\nexport function cleanClassNames(\n  classNameArr: Array<string | undefined>,\n  omit: string[] = []\n) {\n  // Split each arg on whitespace, and add it to an array. Skip false-y args\n  // like \"\" and undefined.\n  const classList = classNameArr\n    .filter(Boolean)\n    .reduce<string[]>(\n      (previous, current) => previous.concat(current!.trim().split(/\\s+/)),\n      []\n    );\n\n  // Remove any class names from omit, and make the rest unique before\n  // returning them as a string\n  return [...new Set(classList.filter((cn) => !omit.includes(cn)))].join(\" \");\n}\n\n/**\n *\n * @param {boolean} wrap\n * @param Component\n * @param {Object} props\n * @returns {*}\n * @constructor\n */\nexport function MaybeWrap({\n  wrap,\n  component: Component = \"div\",\n  ...props\n}: WrapProps) {\n  return wrap ? <Component {...props} /> : props.children;\n}\n","import React from \"react\";\nimport {\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getUiOptions,\n} from \"@rjsf/utils\";\nimport { Button, Grid, Segment } from \"semantic-ui-react\";\n\nimport { MaybeWrap } from \"../util\";\n\nconst gridStyle = (vertical: boolean) => ({\n  display: \"grid\",\n  gridTemplateColumns: `1fr ${vertical ? 65 : 110}px`,\n});\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    uiSchema,\n    registry,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  // Pull the semantic props out of the uiOptions that were put in via the ArrayFieldTemplate\n  const { horizontalButtons = false, wrapItem = false } =\n    uiOptions.semantic as GenericObjectType;\n  return (\n    <div className=\"array-item\">\n      <MaybeWrap wrap={wrapItem} component={Segment}>\n        <Grid\n          style={\n            index !== 0\n              ? { ...gridStyle(!horizontalButtons), alignItems: \"center\" }\n              : gridStyle(!horizontalButtons)\n          }\n        >\n          <Grid.Column width={16} verticalAlign=\"middle\">\n            {children}\n          </Grid.Column>\n          {hasToolbar && (\n            <Grid.Column>\n              {(hasMoveUp || hasMoveDown || hasRemove) && (\n                <Button.Group size=\"mini\" vertical={!horizontalButtons}>\n                  {(hasMoveUp || hasMoveDown) && (\n                    <MoveUpButton\n                      className=\"array-item-move-up\"\n                      disabled={disabled || readonly || !hasMoveUp}\n                      onClick={onReorderClick(index, index - 1)}\n                      uiSchema={uiSchema}\n                      registry={registry}\n                    />\n                  )}\n                  {(hasMoveUp || hasMoveDown) && (\n                    <MoveDownButton\n                      className=\"array-item-move-down\"\n                      disabled={disabled || readonly || !hasMoveDown}\n                      onClick={onReorderClick(index, index + 1)}\n                      uiSchema={uiSchema}\n                      registry={registry}\n                    />\n                  )}\n                  {hasRemove && (\n                    <RemoveButton\n                      className=\"array-item-remove\"\n                      disabled={disabled || readonly}\n                      onClick={onDropIndexClick(index)}\n                      uiSchema={uiSchema}\n                      registry={registry}\n                    />\n                  )}\n                </Button.Group>\n              )}\n            </Grid.Column>\n          )}\n        </Grid>\n      </MaybeWrap>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  isFixedItems,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UI_OPTIONS_KEY,\n} from \"@rjsf/utils\";\n\nimport { cleanClassNames, getSemanticProps } from \"../util\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    uiSchema,\n    idSchema,\n    canAdd,\n    className,\n    // classNames, This is not part of the type, so it is likely never passed in\n    disabled,\n    formContext,\n    items,\n    onAddClick,\n    // options, This is not part of the type, so it is likely never passed in\n    readonly,\n    required,\n    schema,\n    title,\n    registry,\n  } = props;\n  const semanticProps = getSemanticProps<T, S, F>({\n    uiSchema,\n    formContext,\n    defaultSchemaProps: { horizontalButtons: false, wrapItem: false },\n  });\n  const { horizontalButtons, wrapItem } = semanticProps;\n  const semantic = { horizontalButtons, wrapItem };\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, S, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\n    \"ArrayFieldTitleTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <div\n      className={cleanClassNames([\n        className,\n        isFixedItems<S>(schema) ? \"\" : \"sortable-form-fields\",\n      ])}\n    >\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        schema={schema}\n        uiSchema={uiSchema}\n        required={required}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div key={`array-item-list-${idSchema.$id}`}>\n        <div className=\"row array-item-list\">\n          {items &&\n            items.map(\n              ({\n                key,\n                uiSchema: itemUiSchema = {},\n                ...props\n              }: ArrayFieldTemplateItemType<T, S, F>) => {\n                // Merge in the semantic props from the ArrayFieldTemplate into each of the items\n                const mergedUiSchema = {\n                  ...itemUiSchema,\n                  [UI_OPTIONS_KEY]: {\n                    ...itemUiSchema[UI_OPTIONS_KEY],\n                    semantic,\n                  },\n                };\n                return (\n                  <ArrayFieldItemTemplate\n                    key={key}\n                    {...props}\n                    uiSchema={mergedUiSchema}\n                  />\n                );\n              }\n            )}\n        </div>\n        {canAdd && (\n          <div\n            style={{\n              marginTop: \"1rem\",\n              position: \"relative\",\n              textAlign: \"right\",\n            }}\n          >\n            <AddButton\n              onClick={onAddClick}\n              disabled={disabled || readonly}\n              uiSchema={uiSchema}\n              registry={registry}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport { getSemanticProps } from \"../util\";\nimport {\n  ariaDescribedByIds,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    placeholder,\n    label,\n    value,\n    required,\n    readonly,\n    disabled,\n    onChange,\n    onBlur,\n    onFocus,\n    autofocus,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    type,\n    registry,\n    rawErrors = [],\n  } = props;\n  const inputProps = getInputProps<T, S, F>(schema, type, options);\n  const semanticProps = getSemanticProps<T, S, F>({\n    uiSchema,\n    formContext,\n    options,\n  });\n  const { schemaUtils } = registry;\n  const _onChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) =>\n    onChange(value === \"\" ? options.emptyValue : value);\n  const _onBlur = () => onBlur && onBlur(id, value);\n  const _onFocus = () => onFocus && onFocus(id, value);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  return (\n    <>\n      <Form.Input\n        key={id}\n        id={id}\n        name={id}\n        placeholder={placeholder}\n        {...inputProps}\n        label={displayLabel ? label || schema.title : false}\n        required={required}\n        autoFocus={autofocus}\n        disabled={disabled || readonly}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        {...semanticProps}\n        value={value || value === 0 ? value : \"\"}\n        error={rawErrors.length > 0}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(\n              schema.default && !schema.examples.includes(schema.default)\n                ? ([schema.default] as string[])\n                : []\n            )\n            .map((example) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  DescriptionFieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  return (\n    <p id={id} className=\"sui-description\">\n      {description}\n    </p>\n  );\n}\n","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\nimport {\n  ErrorListProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors }: ErrorListProps<T, S, F>) {\n  return (\n    <Message negative>\n      <Message.Header>Errors</Message.Header>\n      <Message.List>\n        {errors.map((error, index) => (\n          <Message.Item key={`error-${index}`}>{error.stack}</Message.Item>\n        ))}\n      </Message.List>\n    </Message>\n  );\n}\n","import React from \"react\";\nimport { Button, ButtonProps } from \"semantic-ui-react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nfunction IconButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  const {\n    icon,\n    iconType,\n    color,\n    className,\n    uiSchema,\n    registry,\n    ...otherProps\n  } = props;\n  return (\n    <Button\n      icon={icon}\n      size={iconType as ButtonProps[\"size\"]}\n      color={color as ButtonProps[\"color\"]}\n      className={className}\n      {...otherProps}\n    />\n  );\n}\n\nexport default IconButton;\n\nexport function MoveDownButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return <IconButton title=\"Move down\" {...props} icon=\"angle down\" />;\n}\n\nexport function MoveUpButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return <IconButton title=\"Move up\" {...props} icon=\"angle up\" />;\n}\n\nexport function RemoveButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return <IconButton title=\"Remove\" {...props} icon=\"trash\" />;\n}\n","import React from \"react\";\nimport {\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport { nanoid } from \"nanoid\";\nimport { Label, List } from \"semantic-ui-react\";\n\nimport { getSemanticErrorProps } from \"../util\";\n\nconst DEFAULT_OPTIONS = {\n  options: {\n    pointing: \"above\",\n    size: \"small\",\n  },\n};\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors, idSchema, uiSchema, registry }: FieldErrorProps<T, S, F>) {\n  const { formContext } = registry;\n  const options = getSemanticErrorProps<T, S, F>({\n    formContext,\n    uiSchema,\n    defaultProps: DEFAULT_OPTIONS,\n  });\n  const { pointing, size } = options;\n  if (errors && errors.length > 0) {\n    const id = `${idSchema.$id}__error`;\n    return (\n      <Label\n        id={id}\n        color=\"red\"\n        pointing={pointing || \"above\"}\n        size={size || \"small\"}\n        basic\n      >\n        <List bulleted>\n          {errors.map((error) => (\n            <List.Item key={nanoid()}>{error}</List.Item>\n          ))}\n        </List>\n      </Label>\n    );\n  }\n  return null;\n}\n","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\nimport {\n  FieldHelpProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (help) {\n    const id = `${idSchema.$id}__help`;\n    return <Message size=\"mini\" info id={id} content={help} />;\n  }\n  return null;\n}\n","import React from \"react\";\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\nimport { Form } from \"semantic-ui-react\";\nimport { getSemanticProps, MaybeWrap } from \"../util\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    children,\n    classNames,\n    style,\n    displayLabel,\n    label,\n    errors,\n    help,\n    hidden,\n    rawDescription,\n    registry,\n    schema,\n    uiSchema,\n    ...otherProps\n  } = props;\n  const semanticProps = getSemanticProps<T, S, F>(otherProps);\n  const { wrapLabel, wrapContent } = semanticProps;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\n    \"WrapIfAdditionalTemplate\",\n    T,\n    S,\n    F\n  >(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n\n  if (hidden) {\n    return <div style={{ display: \"none\" }}>{children}</div>;\n  }\n\n  return (\n    <WrapIfAdditionalTemplate\n      classNames={classNames}\n      style={style}\n      id={id}\n      label={label}\n      registry={registry}\n      schema={schema}\n      uiSchema={uiSchema}\n      {...otherProps}\n    >\n      <Form.Group key={id} widths=\"equal\" grouped>\n        <MaybeWrap wrap={wrapContent} className=\"sui-field-content\">\n          {children}\n          {displayLabel && rawDescription && (\n            <MaybeWrap wrap={wrapLabel} className=\"sui-field-label\">\n              {rawDescription && (\n                <DescriptionFieldTemplate\n                  id={descriptionId<T>(id)}\n                  description={rawDescription}\n                  schema={schema}\n                  uiSchema={uiSchema}\n                  registry={registry}\n                />\n              )}\n            </MaybeWrap>\n          )}\n          {help}\n          {errors}\n        </MaybeWrap>\n      </Form.Group>\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport {\n  FormContextType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    onAddClick,\n    title,\n    properties,\n    disabled,\n    readonly,\n    required,\n    uiSchema,\n    schema,\n    formData,\n    idSchema,\n    registry,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  const fieldTitle = uiOptions.title || title;\n  const fieldDescription = uiOptions.description || description;\n  return (\n    <>\n      {fieldTitle && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={fieldTitle}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {fieldDescription && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={fieldDescription}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <Grid.Column width={16} verticalAlign=\"middle\">\n          <Grid.Row>\n            <div\n              style={{\n                marginTop: \"1rem\",\n                position: \"relative\",\n                textAlign: \"right\",\n              }}\n            >\n              <AddButton\n                onClick={onAddClick(schema)}\n                disabled={disabled || readonly}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            </div>\n          </Grid.Row>\n        </Grid.Column>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport {\n  getSubmitButtonOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  SubmitButtonProps,\n} from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <Button type=\"submit\" primary {...submitButtonProps}>\n      {submitText}\n    </Button>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  TitleFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport { Header } from \"semantic-ui-react\";\n\nimport { getSemanticProps } from \"../util\";\n\nconst DEFAULT_OPTIONS = {\n  inverted: false,\n  dividing: true,\n};\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ id, title, uiSchema }: TitleFieldProps<T, S, F>) {\n  const semanticProps = getSemanticProps<T, S, F>({\n    uiSchema,\n    defaultSchemaProps: DEFAULT_OPTIONS,\n  });\n  if (!title) {\n    return null;\n  }\n  return (\n    <Header id={id} {...semanticProps} as=\"h5\">\n      {title}\n    </Header>\n  );\n}\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\nimport { Form, Grid } from \"semantic-ui-react\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    children,\n    classNames,\n    style,\n    disabled,\n    id,\n    label,\n    onDropPropertyClick,\n    onKeyChange,\n    readonly,\n    required,\n    schema,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const { readonlyAsDisabled = true, wrapperStyle } = registry.formContext;\n\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onKeyChange(target.value);\n\n  return (\n    <div className={classNames} style={style} key={`${id}-key`}>\n      <Grid columns=\"equal\">\n        <Grid.Row>\n          <Grid.Column className=\"form-additional\">\n            <Form.Group widths=\"equal\" grouped>\n              <Form.Input\n                className=\"form-group\"\n                hasFeedback\n                fluid\n                htmlFor={`${id}`}\n                label={keyLabel}\n                required={required}\n                defaultValue={label}\n                disabled={disabled || (readonlyAsDisabled && readonly)}\n                id={`${id}`}\n                name={`${id}`}\n                onBlur={!readonly ? handleBlur : undefined}\n                style={wrapperStyle}\n                type=\"text\"\n              ></Form.Input>\n            </Form.Group>\n          </Grid.Column>\n          <Grid.Column className=\"form-additional\" verticalAlign=\"middle\">\n            {children}\n          </Grid.Column>\n          <Grid.Column>\n            <RemoveButton\n              iconType=\"mini\"\n              className=\"array-item-remove\"\n              disabled={disabled || readonly}\n              onClick={onDropPropertyClick(label)}\n              uiSchema={uiSchema}\n              registry={registry}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport AddButton from \"../AddButton\";\nimport ArrayFieldItemTemplate from \"../ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"../ArrayFieldTemplate\";\nimport BaseInputTemplate from \"../BaseInputTemplate\";\nimport DescriptionField from \"../DescriptionField\";\nimport ErrorList from \"../ErrorList\";\nimport { MoveDownButton, MoveUpButton, RemoveButton } from \"../IconButton\";\nimport FieldErrorTemplate from \"../FieldErrorTemplate\";\nimport FieldHelpTemplate from \"../FieldHelpTemplate\";\nimport FieldTemplate from \"../FieldTemplate\";\nimport ObjectFieldTemplate from \"../ObjectFieldTemplate\";\nimport SubmitButton from \"../SubmitButton\";\nimport TitleField from \"../TitleField\";\nimport WrapIfAdditionalTemplate from \"../WrapIfAdditionalTemplate\";\n\nexport function generateTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Partial<TemplatesType<T, S, F>> {\n  return {\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    BaseInputTemplate,\n    ButtonTemplates: {\n      AddButton,\n      MoveDownButton,\n      MoveUpButton,\n      RemoveButton,\n      SubmitButton,\n    },\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    FieldTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default generateTemplates();\n","import React from \"react\";\nimport {\n  ariaDescribedByIds,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport { Form, CheckboxProps } from \"semantic-ui-react\";\nimport { getSemanticProps } from \"../util\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    disabled,\n    readonly,\n    label,\n    autofocus,\n    onChange,\n    onBlur,\n    options,\n    onFocus,\n    formContext,\n    schema,\n    uiSchema,\n    rawErrors = [],\n  } = props;\n  const semanticProps = getSemanticProps<T, S, F>({\n    options,\n    formContext,\n    uiSchema,\n    defaultSchemaProps: {\n      inverted: false,\n    },\n  });\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n  const _onChange = (\n    _: React.FormEvent<HTMLInputElement>,\n    data: CheckboxProps\n  ) => onChange && onChange(data.checked);\n  const _onBlur = () => onBlur && onBlur(id, value);\n  const _onFocus = () => onFocus && onFocus(id, value);\n  const checked = value == \"true\" || value == true;\n  return (\n    <Form.Checkbox\n      id={id}\n      name={id}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      {...semanticProps}\n      checked={typeof value === \"undefined\" ? false : checked}\n      error={rawErrors.length > 0}\n      onChange={_onChange}\n      onBlur={_onBlur}\n      onFocus={_onFocus}\n      required={required}\n      label={label || \"\"}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n","import React from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  getTemplate,\n  optionId,\n  titleId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport { getSemanticProps } from \"../util\";\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    disabled,\n    options,\n    value,\n    autofocus,\n    readonly,\n    onChange,\n    onBlur,\n    onFocus,\n    formContext,\n    schema,\n    uiSchema,\n    rawErrors = [],\n    registry,\n  } = props;\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const { enumOptions, enumDisabled, inline } = options;\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n  const { title } = schema;\n  const semanticProps = getSemanticProps<T, S, F>({\n    options,\n    formContext,\n    uiSchema,\n    defaultSchemaProps: {\n      inverted: false,\n    },\n  });\n  const _onChange =\n    (index: number) =>\n    ({ target: { checked } }: React.ChangeEvent<HTMLInputElement>) => {\n      // eslint-disable-next-line no-shadow\n      if (checked) {\n        onChange(\n          enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions)\n        );\n      } else {\n        onChange(\n          enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions)\n        );\n      }\n    };\n\n  const _onBlur = () => onBlur(id, value);\n  const _onFocus = () => onFocus(id, value);\n  const inlineOption = inline ? { inline: true } : { grouped: true };\n  return (\n    <>\n      {title && (\n        <TitleFieldTemplate\n          id={titleId<T>(id)}\n          title={title}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <Form.Group id={id} name={id} {...inlineOption}>\n        {Array.isArray(enumOptions) &&\n          enumOptions.map((option, index) => {\n            const checked = enumOptionsIsSelected<S>(\n              option.value,\n              checkboxesValues\n            );\n            const itemDisabled =\n              Array.isArray(enumDisabled) &&\n              enumDisabled.indexOf(option.value) !== -1;\n            return (\n              <Form.Checkbox\n                id={optionId(id, index)}\n                name={id}\n                key={index}\n                label={option.label}\n                {...semanticProps}\n                checked={checked}\n                error={rawErrors.length > 0}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={_onChange(index)}\n                onBlur={_onBlur}\n                onFocus={_onFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n            );\n          })}\n      </Form.Group>\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport { CheckboxProps, Form, Radio } from \"semantic-ui-react\";\nimport { getSemanticProps } from \"../util\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RadioWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    required,\n    disabled,\n    readonly,\n    onChange,\n    onBlur,\n    onFocus,\n    options,\n    formContext,\n    uiSchema,\n    rawErrors = [],\n  } = props;\n  const { enumOptions, enumDisabled, emptyValue } = options;\n  const semanticProps = getSemanticProps<T, S, F>({\n    formContext,\n    options,\n    uiSchema,\n  });\n  const _onChange = (\n    _: React.FormEvent<HTMLInputElement>,\n    { value: eventValue }: CheckboxProps\n  ) => {\n    return onChange(\n      enumOptionsValueForIndex<S>(eventValue!, enumOptions, emptyValue)\n    );\n  };\n\n  const _onBlur = () => onBlur(id, value);\n  const _onFocus = () => onFocus(id, value);\n  const inlineOption = options.inline ? { inline: true } : { grouped: true };\n  return (\n    <Form.Group {...inlineOption}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) !== -1;\n          return (\n            <Form.Field\n              required={required}\n              control={Radio}\n              id={optionId(id, index)}\n              name={id}\n              {...semanticProps}\n              onFocus={_onFocus}\n              onBlur={_onBlur}\n              onChange={_onChange}\n              label={option.label}\n              value={String(index)}\n              error={rawErrors.length > 0}\n              key={index}\n              checked={checked}\n              disabled={disabled || itemDisabled || readonly}\n              aria-describedby={ariaDescribedByIds<T>(id)}\n            />\n          );\n        })}\n    </Form.Group>\n  );\n}\n","import React from \"react\";\nimport { Input } from \"semantic-ui-react\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  rangeSpec,\n} from \"@rjsf/utils\";\nimport { getSemanticProps } from \"../util\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    required,\n    readonly,\n    disabled,\n    onChange,\n    onBlur,\n    onFocus,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    rawErrors = [],\n  } = props;\n  const semanticProps = getSemanticProps<T, S, F>({\n    formContext,\n    options,\n    uiSchema,\n    defaultSchemaProps: {\n      fluid: true,\n    },\n  });\n\n  // eslint-disable-next-line no-shadow\n  const _onChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) =>\n    onChange && onChange(value === \"\" ? options.emptyValue : value);\n  const _onBlur = () => onBlur && onBlur(id, value);\n  const _onFocus = () => onFocus && onFocus(id, value);\n\n  return (\n    <>\n      <Input\n        id={id}\n        key={id}\n        name={id}\n        type=\"range\"\n        required={required}\n        disabled={disabled || readonly}\n        {...rangeSpec<S>(schema)}\n        {...semanticProps}\n        value={value || \"\"}\n        error={rawErrors.length > 0}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      />\n      <span>{value}</span>\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  EnumOptionsType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  UIOptionsType,\n} from \"@rjsf/utils\";\nimport map from \"lodash/map\";\nimport { Form, DropdownProps } from \"semantic-ui-react\";\nimport { getSemanticProps } from \"../util\";\n\n/**\n * Returns and creates an array format required for semantic drop down\n * @param {array} enumOptions- array of items for the dropdown\n * @param {array} enumDisabled - array of enum option values to disable\n * @returns {*}\n */\nfunction createDefaultValueOptionsForDropDown<\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  enumOptions?: EnumOptionsType<S>[],\n  enumDisabled?: UIOptionsType[\"enumDisabled\"]\n) {\n  const disabledOptions = enumDisabled || [];\n  const options = map(enumOptions, ({ label, value }, index) => ({\n    disabled: disabledOptions.indexOf(value) !== -1,\n    key: label,\n    text: label,\n    value: String(index),\n  }));\n  return options;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function SelectWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    schema,\n    uiSchema,\n    formContext,\n    id,\n    options,\n    label,\n    required,\n    disabled,\n    readonly,\n    value,\n    multiple,\n    placeholder,\n    autofocus,\n    onChange,\n    onBlur,\n    onFocus,\n    rawErrors = [],\n  } = props;\n  const semanticProps = getSemanticProps<T, S, F>({\n    uiSchema,\n    formContext,\n    options,\n    defaultSchemaProps: {\n      inverted: \"false\",\n      selection: true,\n      fluid: true,\n      scrolling: true,\n      upward: false,\n    },\n  });\n  const { enumDisabled, enumOptions, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : \"\";\n  const dropdownOptions = createDefaultValueOptionsForDropDown<S>(\n    enumOptions,\n    enumDisabled\n  );\n  const _onChange = (\n    _: React.SyntheticEvent<HTMLElement>,\n    { value }: DropdownProps\n  ) =>\n    onChange(\n      enumOptionsValueForIndex<S>(value as string[], enumOptions, optEmptyVal)\n    );\n  // eslint-disable-next-line no-shadow\n  const _onBlur = (\n    _: React.FocusEvent<HTMLElement>,\n    { target: { value } }: DropdownProps\n  ) => onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, optEmptyVal));\n  const _onFocus = (\n    _: React.FocusEvent<HTMLElement>,\n    { target: { value } }: DropdownProps\n  ) =>\n    onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, optEmptyVal));\n  const selectedIndexes = enumOptionsIndexForValue<S>(\n    value,\n    enumOptions,\n    multiple\n  );\n\n  return (\n    <Form.Dropdown\n      key={id}\n      id={id}\n      name={id}\n      label={label || schema.title}\n      multiple={typeof multiple === \"undefined\" ? false : multiple}\n      value={typeof value === \"undefined\" ? emptyValue : selectedIndexes}\n      error={rawErrors.length > 0}\n      disabled={disabled}\n      placeholder={placeholder}\n      {...semanticProps}\n      required={required}\n      autoFocus={autofocus}\n      readOnly={readonly}\n      options={dropdownOptions}\n      onChange={_onChange}\n      onBlur={_onBlur}\n      onFocus={_onFocus}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport { Form } from \"semantic-ui-react\";\nimport { getSemanticProps } from \"../util\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    placeholder,\n    value,\n    required,\n    disabled,\n    autofocus,\n    label,\n    readonly,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors = [],\n  } = props;\n  const semanticProps = getSemanticProps<T, S, F>({\n    formContext,\n    options,\n    defaultSchemaProps: { inverted: false },\n  });\n  const { schemaUtils } = registry;\n  // eslint-disable-next-line no-shadow\n  const _onChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLTextAreaElement>) =>\n    onChange && onChange(value === \"\" ? options.emptyValue : value);\n  const _onBlur = () => onBlur && onBlur(id, value);\n  const _onFocus = () => onFocus && onFocus(id, value);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n  return (\n    <Form.TextArea\n      id={id}\n      key={id}\n      name={id}\n      label={displayLabel ? label || schema.title : false}\n      placeholder={placeholder}\n      autoFocus={autofocus}\n      required={required}\n      disabled={disabled || readonly}\n      {...semanticProps}\n      value={value || \"\"}\n      error={rawErrors.length > 0}\n      rows={options.rows || 5}\n      onChange={_onChange}\n      onBlur={_onBlur}\n      onFocus={_onFocus}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n","import {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport CheckboxWidget from \"../CheckboxWidget/CheckboxWidget\";\nimport CheckboxesWidget from \"../CheckboxesWidget/CheckboxesWidget\";\nimport RadioWidget from \"../RadioWidget/RadioWidget\";\nimport RangeWidget from \"../RangeWidget/RangeWidget\";\nimport SelectWidget from \"../SelectWidget/SelectWidget\";\nimport TextareaWidget from \"../TextareaWidget/TextareaWidget\";\n\nexport function generateWidgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    CheckboxWidget,\n    CheckboxesWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextareaWidget,\n  };\n}\n\nexport default generateWidgets();\n","import { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\nimport { ThemeProps } from \"@rjsf/core\";\nimport { Form as SuiForm } from \"semantic-ui-react\";\n\nimport { generateTemplates } from \"../Templates\";\nimport { generateWidgets } from \"../Widgets\";\n\nexport function generateTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): ThemeProps<T, S, F> {\n  return {\n    templates: generateTemplates<T, S, F>(),\n    widgets: generateWidgets<T, S, F>(),\n    _internalFormWrapper: SuiForm,\n  };\n}\n\nexport default generateTheme();\n","import { ComponentType } from \"react\";\nimport { withTheme, FormProps } from \"@rjsf/core\";\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\n\nimport { generateTheme } from \"../Theme\";\n\nexport function generateForm<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): ComponentType<FormProps<T, S, F>> {\n  return withTheme<T, S, F>(generateTheme<T, S, F>());\n}\n\nexport default generateForm();\n"],"names":["AddButton","_ref","uiSchema","color","props","_objectWithoutPropertiesLoose","_excluded","React","createElement","Button","_extends","title","icon","size","Icon","name","getSemanticProps","_ref$formContext","formContext","_ref$uiSchema","_ref$options","options","_ref$defaultSchemaPro","defaultSchemaProps","fluid","inverted","_ref$defaultContextPr","defaultContextProps","formContextProps","semantic","schemaProps","getUiOptions","optionProps","Object","assign","cleanClassNames","classNameArr","omit","classList","filter","Boolean","reduce","previous","current","concat","trim","split","Set","cn","includes","join","MaybeWrap","_ref3","wrap","_ref3$component","component","Component","children","gridStyle","vertical","display","gridTemplateColumns","ArrayFieldItemTemplate","disabled","hasToolbar","hasMoveDown","hasMoveUp","hasRemove","index","onDropIndexClick","onReorderClick","readonly","registry","_registry$templates$B","templates","ButtonTemplates","MoveDownButton","MoveUpButton","RemoveButton","uiOptions","_uiOptions$semantic$h","_uiOptions$semantic","horizontalButtons","_uiOptions$semantic$w","wrapItem","className","Segment","Grid","style","alignItems","Column","width","verticalAlign","Group","onClick","ArrayFieldTemplate","idSchema","canAdd","items","onAddClick","required","schema","semanticProps","ArrayFieldDescriptionTemplate","getTemplate","ArrayFieldTitleTemplate","isFixedItems","description","key","$id","map","_extends2","itemUiSchema","mergedUiSchema","UI_OPTIONS_KEY","marginTop","position","textAlign","BaseInputTemplate","id","placeholder","label","value","onChange","onBlur","onFocus","autofocus","_props$rawErrors","rawErrors","inputProps","getInputProps","type","displayLabel","schemaUtils","getDisplayLabel","Fragment","Form","Input","autoFocus","list","examples","examplesId","undefined","error","length","target","emptyValue","ariaDescribedByIds","Array","isArray","example","DescriptionField","ErrorList","errors","Message","negative","Header","List","Item","stack","IconButton","iconType","otherProps","DEFAULT_OPTIONS","pointing","FieldErrorTemplate","_ref2","_ref2$formContext","_ref2$uiSchema","_ref2$options","_ref2$defaultProps","defaultProps","errorOptions","semanticOptions","getSemanticErrorProps","Label","basic","bulleted","nanoid","FieldHelpTemplate","help","info","content","FieldTemplate","classNames","hidden","rawDescription","wrapLabel","wrapContent","WrapIfAdditionalTemplate","DescriptionFieldTemplate","widths","grouped","descriptionId","ObjectFieldTemplate","properties","formData","TitleFieldTemplate","fieldTitle","fieldDescription","titleId","prop","canExpand","Row","SubmitButton","getSubmitButtonOptions","submitText","_getSubmitButtonOptio2","_getSubmitButtonOptio","norender","primary","dividing","TitleField","as","onDropPropertyClick","onKeyChange","_registry$formContext2","_registry$formContext","readonlyAsDisabled","ADDITIONAL_PROPERTY_FLAG","columns","hasFeedback","htmlFor","defaultValue","wrapperStyle","generateTemplates","ErrorListTemplate","Templates","CheckboxWidget","schemaRequiresTrueValue","Checkbox","checked","_","data","CheckboxesWidget","enumOptions","enumDisabled","inline","checkboxesValues","_onChange","enumOptionsSelectValue","enumOptionsDeselectValue","_onBlur","_onFocus","inlineOption","option","enumOptionsIsSelected","itemDisabled","indexOf","optionId","RadioWidget","enumOptionsValueForIndex","Field","control","Radio","String","RangeWidget","rangeSpec","SelectWidget","multiple","selection","scrolling","upward","optEmptyVal","dropdownOptions","disabledOptions","text","createDefaultValueOptionsForDropDown","selectedIndexes","enumOptionsIndexForValue","Dropdown","readOnly","_ref4","TextareaWidget","TextArea","rows","generateWidgets","Widgets","generateTheme","widgets","_internalFormWrapper","SuiForm","Theme","generateForm","withTheme","SemanticUIForm"],"mappings":"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"}