{"version":3,"file":"antd.umd.production.min.js","sources":["../src/templates/ArrayFieldItemTemplate/index.tsx","../src/templates/ArrayFieldTemplate/index.tsx","../src/templates/BaseInputTemplate/index.tsx","../src/templates/DescriptionField/index.tsx","../src/templates/ErrorList/index.tsx","../src/templates/IconButton/index.tsx","../src/templates/FieldErrorTemplate/index.tsx","../src/templates/FieldTemplate/index.tsx","../src/templates/ObjectFieldTemplate/index.tsx","../src/templates/SubmitButton/index.tsx","../src/templates/TitleField/index.tsx","../src/templates/WrapIfAdditionalTemplate/index.tsx","../src/templates/index.ts","../src/widgets/AltDateWidget/index.tsx","../src/widgets/AltDateTimeWidget/index.tsx","../src/widgets/CheckboxesWidget/index.tsx","../src/widgets/CheckboxWidget/index.tsx","../src/components/DatePicker/index.ts","../src/widgets/DateTimeWidget/index.tsx","../src/widgets/DateWidget/index.tsx","../src/widgets/PasswordWidget/index.tsx","../src/widgets/RadioWidget/index.tsx","../src/widgets/RangeWidget/index.tsx","../src/widgets/SelectWidget/index.tsx","../src/widgets/TextareaWidget/index.tsx","../src/widgets/index.ts","../src/index.ts"],"sourcesContent":["import React from \"react\";\nimport Button from \"antd/lib/button\";\nimport Col from \"antd/lib/col\";\nimport Row from \"antd/lib/row\";\nimport {\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nconst BTN_GRP_STYLE = {\n  width: \"100%\",\n};\n\nconst BTN_STYLE = {\n  width: \"calc(100% / 3)\",\n};\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    disabled,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    hasToolbar,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const { rowGutter = 24, toolbarAlign = \"top\" } = registry.formContext;\n\n  return (\n    <Row align={toolbarAlign} key={`array-item-${index}`} gutter={rowGutter}>\n      <Col flex=\"1\">{children}</Col>\n\n      {hasToolbar && (\n        <Col flex=\"192px\">\n          <Button.Group style={BTN_GRP_STYLE}>\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                style={BTN_STYLE}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                style={BTN_STYLE}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                style={BTN_STYLE}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </Button.Group>\n        </Col>\n      )}\n    </Row>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport classNames from \"classnames\";\nimport Col from \"antd/lib/col\";\nimport Row from \"antd/lib/row\";\nimport {\n  ConfigConsumer,\n  ConfigConsumerProps,\n} from \"antd/lib/config-provider/context\";\n\nconst DESCRIPTION_COL_STYLE = {\n  paddingBottom: \"8px\",\n};\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    formContext,\n    idSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, S, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\n    \"ArrayFieldTitleTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  const { labelAlign = \"right\", rowGutter = 24 } =\n    formContext as GenericObjectType;\n\n  return (\n    <ConfigConsumer>\n      {(configProps: ConfigConsumerProps) => {\n        const { getPrefixCls } = configProps;\n        const prefixCls = getPrefixCls(\"form\");\n        const labelClsBasic = `${prefixCls}-item-label`;\n        const labelColClassName = classNames(\n          labelClsBasic,\n          labelAlign === \"left\" && `${labelClsBasic}-left`\n          // labelCol.className,\n        );\n\n        return (\n          <fieldset className={className} id={idSchema.$id}>\n            <Row gutter={rowGutter}>\n              {(uiOptions.title || title) && (\n                <Col className={labelColClassName} span={24}>\n                  <ArrayFieldTitleTemplate\n                    idSchema={idSchema}\n                    required={required}\n                    title={uiOptions.title || title}\n                    schema={schema}\n                    uiSchema={uiSchema}\n                    registry={registry}\n                  />\n                </Col>\n              )}\n              {(uiOptions.description || schema.description) && (\n                <Col span={24} style={DESCRIPTION_COL_STYLE}>\n                  <ArrayFieldDescriptionTemplate\n                    description={\n                      uiOptions.description || schema.description || \"\"\n                    }\n                    idSchema={idSchema}\n                    schema={schema}\n                    uiSchema={uiSchema}\n                    registry={registry}\n                  />\n                </Col>\n              )}\n              <Col className=\"row array-item-list\" span={24}>\n                {items &&\n                  items.map(\n                    ({\n                      key,\n                      ...itemProps\n                    }: ArrayFieldTemplateItemType<T, S, F>) => (\n                      <ArrayFieldItemTemplate key={key} {...itemProps} />\n                    )\n                  )}\n              </Col>\n\n              {canAdd && (\n                <Col span={24}>\n                  <Row gutter={rowGutter} justify=\"end\">\n                    <Col flex=\"192px\">\n                      <AddButton\n                        className=\"array-item-add\"\n                        disabled={disabled || readonly}\n                        onClick={onAddClick}\n                        uiSchema={uiSchema}\n                        registry={registry}\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n              )}\n            </Row>\n          </fieldset>\n        );\n      }}\n    </ConfigConsumer>\n  );\n}\n","import React from \"react\";\nimport Input from \"antd/lib/input\";\nimport InputNumber from \"antd/lib/input-number\";\nimport {\n  ariaDescribedByIds,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  GenericObjectType,\n} from \"@rjsf/utils\";\n\nconst INPUT_STYLE = {\n  width: \"100%\",\n};\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    disabled,\n    formContext,\n    id,\n    onBlur,\n    onChange,\n    onFocus,\n    options,\n    placeholder,\n    readonly,\n    schema,\n    value,\n    type,\n  } = props;\n  const inputProps = getInputProps<T, S, F>(schema, type, options, false);\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const handleNumberChange = (nextValue: number | null) => onChange(nextValue);\n\n  const handleTextChange = ({ target }: React.ChangeEvent<HTMLInputElement>) =>\n    onChange(target.value === \"\" ? options.emptyValue : target.value);\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(id, target.value);\n\n  const handleFocus = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onFocus(id, target.value);\n\n  const input =\n    inputProps.type === \"number\" || inputProps.type === \"integer\" ? (\n      <InputNumber\n        disabled={disabled || (readonlyAsDisabled && readonly)}\n        id={id}\n        name={id}\n        onBlur={!readonly ? handleBlur : undefined}\n        onChange={!readonly ? handleNumberChange : undefined}\n        onFocus={!readonly ? handleFocus : undefined}\n        placeholder={placeholder}\n        style={INPUT_STYLE}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        {...inputProps}\n        value={value}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n    ) : (\n      <Input\n        disabled={disabled || (readonlyAsDisabled && readonly)}\n        id={id}\n        name={id}\n        onBlur={!readonly ? handleBlur : undefined}\n        onChange={!readonly ? handleTextChange : undefined}\n        onFocus={!readonly ? handleFocus : undefined}\n        placeholder={placeholder}\n        style={INPUT_STYLE}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        {...inputProps}\n        value={value}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n    );\n\n  return (\n    <>\n      {input}\n      {Array.isArray(schema.examples) && (\n        <datalist id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(\n              schema.default && !schema.examples.includes(schema.default)\n                ? ([schema.default] as string[])\n                : []\n            )\n            .map((example) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  DescriptionFieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  return <span id={id}>{description}</span>;\n}\n","import React from \"react\";\nimport Alert from \"antd/lib/alert\";\nimport List from \"antd/lib/list\";\nimport Space from \"antd/lib/space\";\nimport ExclamationCircleOutlined from \"@ant-design/icons/ExclamationCircleOutlined\";\nimport {\n  ErrorListProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors }: ErrorListProps<T, S, F>) {\n  const renderErrors = () => (\n    <List className=\"list-group\" size=\"small\">\n      {errors.map((error, index) => (\n        <List.Item key={index}>\n          <Space>\n            <ExclamationCircleOutlined />\n            {error.stack}\n          </Space>\n        </List.Item>\n      ))}\n    </List>\n  );\n\n  return (\n    <Alert\n      className=\"panel panel-danger errors\"\n      description={renderErrors()}\n      message=\"Errors\"\n      type=\"error\"\n    />\n  );\n}\n","import React from \"react\";\nimport Button, { ButtonProps, ButtonType } from \"antd/lib/button\";\nimport ArrowDownOutlined from \"@ant-design/icons/ArrowDownOutlined\";\nimport ArrowUpOutlined from \"@ant-design/icons/ArrowUpOutlined\";\nimport DeleteOutlined from \"@ant-design/icons/DeleteOutlined\";\nimport PlusCircleOutlined from \"@ant-design/icons/PlusCircleOutlined\";\nimport {\n  getUiOptions,\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n// The `type` for IconButtonProps collides with the `type` for `ButtonProps` so omit it to avoid Typescript issue\nexport type AntdIconButtonProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Omit<IconButtonProps<T, S, F>, \"type\">;\n\nexport default function IconButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: AntdIconButtonProps<T, S, F> & ButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    uiSchema,\n    registry,\n    ...otherProps\n  } = props;\n  return <Button type={iconType as ButtonType} icon={icon} {...otherProps} />;\n}\n\nexport function AddButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: AntdIconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Add Item\"\n      {...props}\n      block\n      iconType=\"primary\"\n      icon={<PlusCircleOutlined />}\n    />\n  );\n}\n\nexport function MoveDownButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: AntdIconButtonProps<T, S, F>) {\n  return (\n    <IconButton title=\"Move down\" {...props} icon={<ArrowDownOutlined />} />\n  );\n}\n\nexport function MoveUpButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: AntdIconButtonProps<T, S, F>) {\n  return <IconButton title=\"Move up\" {...props} icon={<ArrowUpOutlined />} />;\n}\n\nexport function RemoveButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: AntdIconButtonProps<T, S, F>) {\n  // The `block` prop is not part of the `IconButtonProps` defined in the template, so get it from the uiSchema instead\n  const options = getUiOptions<T, S, F>(props.uiSchema);\n  return (\n    <IconButton\n      title=\"Remove\"\n      {...props}\n      danger\n      block={!!options.block}\n      iconType=\"primary\"\n      icon={<DeleteOutlined />}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  errorId,\n} from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div id={id}>\n      {errors.map((error) => (\n        <div key={`field-${id}-error-${error}`}>{error}</div>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Form from \"antd/lib/form\";\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n  GenericObjectType,\n} from \"@rjsf/utils\";\n\nconst VERTICAL_LABEL_COL = { span: 24 };\nconst VERTICAL_WRAPPER_COL = { span: 24 };\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    children,\n    classNames,\n    style,\n    description,\n    disabled,\n    displayLabel,\n    errors,\n    formContext,\n    help,\n    hidden,\n    id,\n    label,\n    onDropPropertyClick,\n    onKeyChange,\n    rawErrors,\n    rawDescription,\n    rawHelp,\n    readonly,\n    registry,\n    required,\n    schema,\n    uiSchema,\n  } = props;\n  const {\n    colon,\n    labelCol = VERTICAL_LABEL_COL,\n    wrapperCol = VERTICAL_WRAPPER_COL,\n    wrapperStyle,\n  } = formContext as GenericObjectType;\n\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\n    \"WrapIfAdditionalTemplate\",\n    T,\n    S,\n    F\n  >(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n\n  if (hidden) {\n    return <div className=\"field-hidden\">{children}</div>;\n  }\n\n  return (\n    <WrapIfAdditionalTemplate\n      classNames={classNames}\n      style={style}\n      disabled={disabled}\n      id={id}\n      label={label}\n      onDropPropertyClick={onDropPropertyClick}\n      onKeyChange={onKeyChange}\n      readonly={readonly}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    >\n      {id === \"root\" ? (\n        children\n      ) : (\n        <Form.Item\n          colon={colon}\n          extra={rawDescription && description}\n          hasFeedback={schema.type !== \"array\" && schema.type !== \"object\"}\n          help={(!!rawHelp && help) || (rawErrors?.length ? errors : undefined)}\n          htmlFor={id}\n          label={displayLabel && label}\n          labelCol={labelCol}\n          required={required}\n          style={wrapperStyle}\n          validateStatus={rawErrors?.length ? \"error\" : undefined}\n          wrapperCol={wrapperCol}\n        >\n          {children}\n        </Form.Item>\n      )}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport isObject from \"lodash/isObject\";\nimport isNumber from \"lodash/isNumber\";\nimport isString from \"lodash/isString\";\nimport {\n  FormContextType,\n  GenericObjectType,\n  ObjectFieldTemplateProps,\n  ObjectFieldTemplatePropertyType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from \"@rjsf/utils\";\nimport Col from \"antd/lib/col\";\nimport Row from \"antd/lib/row\";\nimport {\n  ConfigConsumer,\n  ConfigConsumerProps,\n} from \"antd/lib/config-provider/context\";\n\nconst DESCRIPTION_COL_STYLE = {\n  paddingBottom: \"8px\",\n};\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formContext,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    required,\n    registry,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  const {\n    colSpan = 24,\n    labelAlign = \"right\",\n    rowGutter = 24,\n  } = formContext as GenericObjectType;\n\n  const findSchema = (element: ObjectFieldTemplatePropertyType): S =>\n    element.content.props.schema;\n\n  const findSchemaType = (element: ObjectFieldTemplatePropertyType) =>\n    findSchema(element).type;\n\n  const findUiSchema = (\n    element: ObjectFieldTemplatePropertyType\n  ): UiSchema<T, S, F> | undefined => element.content.props.uiSchema;\n\n  const findUiSchemaField = (element: ObjectFieldTemplatePropertyType) =>\n    getUiOptions(findUiSchema(element)).field;\n\n  const findUiSchemaWidget = (element: ObjectFieldTemplatePropertyType) =>\n    getUiOptions(findUiSchema(element)).widget;\n\n  const calculateColSpan = (element: ObjectFieldTemplatePropertyType) => {\n    const type = findSchemaType(element);\n    const field = findUiSchemaField(element);\n    const widget = findUiSchemaWidget(element);\n\n    const defaultColSpan =\n      properties.length < 2 || // Single or no field in object.\n      type === \"object\" ||\n      type === \"array\" ||\n      widget === \"textarea\"\n        ? 24\n        : 12;\n\n    if (isObject(colSpan)) {\n      const colSpanObj: GenericObjectType = colSpan;\n      if (isString(widget)) {\n        return colSpanObj[widget];\n      }\n      if (isString(field)) {\n        return colSpanObj[field];\n      }\n      if (isString(type)) {\n        return colSpanObj[type];\n      }\n    }\n    if (isNumber(colSpan)) {\n      return colSpan;\n    }\n    return defaultColSpan;\n  };\n\n  return (\n    <ConfigConsumer>\n      {(configProps: ConfigConsumerProps) => {\n        const { getPrefixCls } = configProps;\n        const prefixCls = getPrefixCls(\"form\");\n        const labelClsBasic = `${prefixCls}-item-label`;\n        const labelColClassName = classNames(\n          labelClsBasic,\n          labelAlign === \"left\" && `${labelClsBasic}-left`\n          // labelCol.className,\n        );\n\n        return (\n          <fieldset id={idSchema.$id}>\n            <Row gutter={rowGutter}>\n              {(uiOptions.title || title) && (\n                <Col className={labelColClassName} span={24}>\n                  <TitleFieldTemplate\n                    id={titleId<T>(idSchema)}\n                    title={uiOptions.title || title}\n                    required={required}\n                    schema={schema}\n                    uiSchema={uiSchema}\n                    registry={registry}\n                  />\n                </Col>\n              )}\n              {(uiOptions.description || description) && (\n                <Col span={24} style={DESCRIPTION_COL_STYLE}>\n                  <DescriptionFieldTemplate\n                    id={descriptionId<T>(idSchema)}\n                    description={uiOptions.description || description!}\n                    schema={schema}\n                    uiSchema={uiSchema}\n                    registry={registry}\n                  />\n                </Col>\n              )}\n              {properties\n                .filter((e) => !e.hidden)\n                .map((element: ObjectFieldTemplatePropertyType) => (\n                  <Col key={element.name} span={calculateColSpan(element)}>\n                    {element.content}\n                  </Col>\n                ))}\n            </Row>\n\n            {canExpand(schema, uiSchema, formData) && (\n              <Col span={24}>\n                <Row gutter={rowGutter} justify=\"end\">\n                  <Col flex=\"192px\">\n                    <AddButton\n                      className=\"object-property-expand\"\n                      disabled={disabled || readonly}\n                      onClick={onAddClick(schema)}\n                      uiSchema={uiSchema}\n                      registry={registry}\n                    />\n                  </Col>\n                </Row>\n              </Col>\n            )}\n          </fieldset>\n        );\n      }}\n    </ConfigConsumer>\n  );\n}\n","import React from \"react\";\nimport Button, { ButtonType } from \"antd/lib/button\";\nimport {\n  getSubmitButtonOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  SubmitButtonProps,\n} from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps,\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <Button\n      type={\"submit\" as ButtonType}\n      {...submitButtonProps}\n      htmlType=\"submit\"\n    >\n      {submitText}\n    </Button>\n  );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport {\n  ConfigConsumer,\n  ConfigConsumerProps,\n} from \"antd/lib/config-provider/context\";\nimport {\n  FormContextType,\n  TitleFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ id, required, registry, title }: TitleFieldProps<T, S, F>) {\n  const { formContext } = registry;\n  const { colon = true } = formContext;\n\n  let labelChildren = title;\n  if (colon && typeof title === \"string\" && title.trim() !== \"\") {\n    labelChildren = title.replace(/[：:]\\s*$/, \"\");\n  }\n\n  const handleLabelClick = () => {\n    if (!id) {\n      return;\n    }\n\n    const control: HTMLLabelElement | null = document.querySelector(\n      `[id=\"${id}\"]`\n    );\n    if (control && control.focus) {\n      control.focus();\n    }\n  };\n\n  return title ? (\n    <ConfigConsumer>\n      {(configProps: ConfigConsumerProps) => {\n        const { getPrefixCls } = configProps;\n        const prefixCls = getPrefixCls(\"form\");\n        const labelClassName = classNames({\n          [`${prefixCls}-item-required`]: required,\n          [`${prefixCls}-item-no-colon`]: !colon,\n        });\n\n        return (\n          <label\n            className={labelClassName}\n            htmlFor={id}\n            onClick={handleLabelClick}\n            title={typeof title === \"string\" ? title : \"\"}\n          >\n            {labelChildren}\n          </label>\n        );\n      }}\n    </ConfigConsumer>\n  ) : null;\n}\n","import React from \"react\";\nimport Col from \"antd/lib/col\";\nimport Form from \"antd/lib/form\";\nimport Input from \"antd/lib/input\";\nimport Row from \"antd/lib/row\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  UI_OPTIONS_KEY,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nconst VERTICAL_LABEL_COL = { span: 24 };\nconst VERTICAL_WRAPPER_COL = { span: 24 };\n\nconst INPUT_STYLE = {\n  width: \"100%\",\n};\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    children,\n    classNames,\n    style,\n    disabled,\n    id,\n    label,\n    onDropPropertyClick,\n    onKeyChange,\n    readonly,\n    required,\n    registry,\n    schema,\n    uiSchema,\n  } = props;\n  const {\n    colon,\n    labelCol = VERTICAL_LABEL_COL,\n    readonlyAsDisabled = true,\n    rowGutter = 24,\n    toolbarAlign = \"top\",\n    wrapperCol = VERTICAL_WRAPPER_COL,\n    wrapperStyle,\n  } = registry.formContext;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onKeyChange(target.value);\n\n  // The `block` prop is not part of the `IconButtonProps` defined in the template, so put it into the uiSchema instead\n  const uiOptions = uiSchema ? uiSchema[UI_OPTIONS_KEY] : {};\n  const buttonUiOptions = {\n    ...uiSchema,\n    [UI_OPTIONS_KEY]: { ...uiOptions, block: true },\n  };\n\n  return (\n    <div className={classNames} style={style}>\n      <Row align={toolbarAlign} gutter={rowGutter}>\n        <Col className=\"form-additional\" flex=\"1\">\n          <div className=\"form-group\">\n            <Form.Item\n              colon={colon}\n              className=\"form-group\"\n              hasFeedback\n              htmlFor={`${id}-key`}\n              label={keyLabel}\n              labelCol={labelCol}\n              required={required}\n              style={wrapperStyle}\n              wrapperCol={wrapperCol}\n            >\n              <Input\n                className=\"form-control\"\n                defaultValue={label}\n                disabled={disabled || (readonlyAsDisabled && readonly)}\n                id={`${id}-key`}\n                name={`${id}-key`}\n                onBlur={!readonly ? handleBlur : undefined}\n                style={INPUT_STYLE}\n                type=\"text\"\n              />\n            </Form.Item>\n          </div>\n        </Col>\n        <Col className=\"form-additional\" flex=\"1\">\n          {children}\n        </Col>\n        <Col flex=\"192px\">\n          <RemoveButton\n            className=\"array-item-remove\"\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={buttonUiOptions}\n            registry={registry}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport {\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n} from \"./IconButton\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport SubmitButton from \"./SubmitButton\";\nimport TitleField from \"./TitleField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nexport function generateTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Partial<TemplatesType<T, S, F>> {\n  return {\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    BaseInputTemplate,\n    ButtonTemplates: {\n      AddButton,\n      MoveDownButton,\n      MoveUpButton,\n      RemoveButton,\n      SubmitButton,\n    },\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldErrorTemplate,\n    FieldTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default generateTemplates();\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"antd/lib/button\";\nimport Col from \"antd/lib/col\";\nimport Row from \"antd/lib/row\";\nimport {\n  ariaDescribedByIds,\n  pad,\n  parseDateString,\n  toDateString,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  GenericObjectType,\n} from \"@rjsf/utils\";\n\ntype DateElementProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  WidgetProps<T, S, F>,\n  | \"id\"\n  | \"name\"\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nconst rangeOptions = (start: number, stop: number) => {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n};\n\nconst readyForChange = (state: DateObject) => {\n  return Object.values(state).every((value) => value !== -1);\n};\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour || -1 },\n      { type: \"minute\", range: [0, 59], value: minute || -1 },\n      { type: \"second\", range: [0, 59], value: second || -1 }\n    );\n  }\n  return data;\n}\n\nexport default function AltDateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    autofocus,\n    disabled,\n    formContext,\n    id,\n    onBlur,\n    onChange,\n    onFocus,\n    options,\n    readonly,\n    registry,\n    showTime,\n    value,\n  } = props;\n  const { SelectWidget } = registry.widgets;\n  const { rowGutter = 24 } = formContext as GenericObjectType;\n\n  const [state, setState] = useState(parseDateString(value, showTime));\n\n  useEffect(() => {\n    setState(parseDateString(value, showTime));\n  }, [showTime, value]);\n\n  const handleChange = (property: keyof DateObject, nextValue: any) => {\n    const nextState = {\n      ...state,\n      [property]: typeof nextValue === \"undefined\" ? -1 : nextValue,\n    };\n\n    if (readyForChange(nextState)) {\n      onChange(toDateString(nextState, showTime));\n    } else {\n      setState(nextState);\n    }\n  };\n\n  const handleNow = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (disabled || readonly) {\n      return;\n    }\n    const nextState = parseDateString(new Date().toJSON(), showTime);\n    onChange(toDateString(nextState, showTime));\n  };\n\n  const handleClear = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (disabled || readonly) {\n      return;\n    }\n    onChange(undefined);\n  };\n\n  const renderDateElement = (elemProps: DateElementProps<T, S, F>) => (\n    <SelectWidget\n      autofocus={elemProps.autofocus}\n      className=\"form-control\"\n      disabled={elemProps.disabled}\n      id={elemProps.id}\n      name={elemProps.name}\n      onBlur={elemProps.onBlur}\n      onChange={(elemValue) =>\n        elemProps.select(elemProps.type as keyof DateObject, elemValue)\n      }\n      onFocus={elemProps.onFocus}\n      options={{\n        enumOptions: rangeOptions(elemProps.range[0], elemProps.range[1]),\n      }}\n      placeholder={elemProps.type}\n      readonly={elemProps.readonly}\n      schema={{ type: \"integer\" } as S}\n      value={elemProps.value}\n      registry={registry}\n      label=\"\"\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n\n  return (\n    <Row gutter={[Math.floor(rowGutter / 2), Math.floor(rowGutter / 2)]}>\n      {dateElementProps(\n        state,\n        showTime,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => {\n        const elemId = id + \"_\" + elemProps.type;\n        return (\n          <Col flex=\"88px\" key={elemId}>\n            {renderDateElement({\n              ...elemProps,\n              autofocus: autofocus && i === 0,\n              disabled,\n              id: elemId,\n              name: id,\n              onBlur,\n              onFocus,\n              readonly,\n              registry,\n              select: handleChange,\n              // NOTE: antd components accept -1 rather than issue a warning\n              // like material-ui, so we need to convert -1 to undefined here.\n              value: elemProps.value < 0 ? undefined : elemProps.value,\n            })}\n          </Col>\n        );\n      })}\n      {!options.hideNowButton && (\n        <Col flex=\"88px\">\n          <Button block className=\"btn-now\" onClick={handleNow} type=\"primary\">\n            Now\n          </Button>\n        </Col>\n      )}\n      {!options.hideClearButton && (\n        <Col flex=\"88px\">\n          <Button\n            block\n            className=\"btn-clear\"\n            danger\n            onClick={handleClear}\n            type=\"primary\"\n          >\n            Clear\n          </Button>\n        </Col>\n      )}\n    </Row>\n  );\n}\n\nAltDateWidget.defaultProps = {\n  autofocus: false,\n  disabled: false,\n  options: {\n    yearsRange: [1900, new Date().getFullYear() + 2],\n  },\n  readonly: false,\n  showTime: false,\n};\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nimport _AltDateWidget from \"../AltDateWidget\";\n\nexport default function AltDateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget showTime {...props} />;\n}\n\nAltDateTimeWidget.defaultProps = {\n  ..._AltDateWidget.defaultProps,\n  showTime: true,\n};\n","import React from \"react\";\nimport Checkbox from \"antd/lib/checkbox\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  GenericObjectType,\n} from \"@rjsf/utils\";\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  autofocus,\n  disabled,\n  formContext,\n  id,\n  onBlur,\n  onChange,\n  onFocus,\n  options,\n  readonly,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleChange = (nextValue: any) =>\n    onChange(enumOptionsValueForIndex<S>(nextValue, enumOptions, emptyValue));\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(\n      id,\n      enumOptionsValueForIndex<S>(target.value, enumOptions, emptyValue)\n    );\n\n  const handleFocus = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onFocus(\n      id,\n      enumOptionsValueForIndex<S>(target.value, enumOptions, emptyValue)\n    );\n\n  // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,\n  // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors\n  const extraProps = {\n    id,\n    onBlur: !readonly ? handleBlur : undefined,\n    onFocus: !readonly ? handleFocus : undefined,\n  };\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(\n    value,\n    enumOptions,\n    true\n  ) as string[];\n\n  return Array.isArray(enumOptions) && enumOptions.length > 0 ? (\n    <Checkbox.Group\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      name={id}\n      onChange={!readonly ? handleChange : undefined}\n      value={selectedIndexes}\n      {...extraProps}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => (\n          <span key={i}>\n            <Checkbox\n              id={optionId(id, i)}\n              name={id}\n              autoFocus={i === 0 ? autofocus : false}\n              disabled={\n                Array.isArray(enumDisabled) &&\n                enumDisabled.indexOf(value) !== -1\n              }\n              value={String(i)}\n            >\n              {option.label}\n            </Checkbox>\n            {!inline && <br />}\n          </span>\n        ))}\n    </Checkbox.Group>\n  ) : null;\n}\n","import React from \"react\";\nimport Checkbox, { CheckboxChangeEvent } from \"antd/lib/checkbox\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  GenericObjectType,\n} from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    autofocus,\n    disabled,\n    formContext,\n    id,\n    label,\n    onBlur,\n    onChange,\n    onFocus,\n    readonly,\n    value,\n  } = props;\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const handleChange = ({ target }: CheckboxChangeEvent) =>\n    onChange(target.checked);\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(id, target.checked);\n\n  const handleFocus = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onFocus(id, target.checked);\n\n  // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,\n  // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors\n  const extraProps = {\n    onBlur: !readonly ? handleBlur : undefined,\n    onFocus: !readonly ? handleFocus : undefined,\n  };\n\n  return (\n    <Checkbox\n      autoFocus={autofocus}\n      checked={typeof value === \"undefined\" ? false : value}\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      id={id}\n      name={id}\n      onChange={!readonly ? handleChange : undefined}\n      {...extraProps}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {label}\n    </Checkbox>\n  );\n}\n","import dayjsGenerateConfig from \"rc-picker/lib/generate/dayjs\";\nimport generatePicker from \"antd/lib/date-picker/generatePicker\";\n\nconst DatePicker = generatePicker(dayjsGenerateConfig);\n\nexport default DatePicker;\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nimport DatePicker from \"../../components/DatePicker\";\n\nconst DATE_PICKER_STYLE = {\n  width: \"100%\",\n};\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    disabled,\n    formContext,\n    id,\n    onBlur,\n    onChange,\n    onFocus,\n    placeholder,\n    readonly,\n    value,\n  } = props;\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const handleChange = (nextValue: any) =>\n    onChange(nextValue && nextValue.toISOString());\n\n  const handleBlur = () => onBlur(id, value);\n\n  const handleFocus = () => onFocus(id, value);\n\n  const getPopupContainer = (node: any) => node.parentNode;\n\n  return (\n    <DatePicker\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      getPopupContainer={getPopupContainer}\n      id={id}\n      name={id}\n      onBlur={!readonly ? handleBlur : undefined}\n      onChange={!readonly ? handleChange : undefined}\n      onFocus={!readonly ? handleFocus : undefined}\n      placeholder={placeholder}\n      showTime\n      style={DATE_PICKER_STYLE}\n      value={value && dayjs(value)}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  GenericObjectType,\n} from \"@rjsf/utils\";\n\nimport DatePicker from \"../../components/DatePicker\";\n\nconst DATE_PICKER_STYLE = {\n  width: \"100%\",\n};\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    disabled,\n    formContext,\n    id,\n    onBlur,\n    onChange,\n    onFocus,\n    placeholder,\n    readonly,\n    value,\n  } = props;\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const handleChange = (nextValue: any) =>\n    onChange(nextValue && nextValue.format(\"YYYY-MM-DD\"));\n\n  const handleBlur = () => onBlur(id, value);\n\n  const handleFocus = () => onFocus(id, value);\n\n  const getPopupContainer = (node: any) => node.parentNode;\n\n  return (\n    <DatePicker\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      getPopupContainer={getPopupContainer}\n      id={id}\n      name={id}\n      onBlur={!readonly ? handleBlur : undefined}\n      onChange={!readonly ? handleChange : undefined}\n      onFocus={!readonly ? handleFocus : undefined}\n      placeholder={placeholder}\n      showTime={false}\n      style={DATE_PICKER_STYLE}\n      value={value && dayjs(value)}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n","import React from \"react\";\nimport Input from \"antd/lib/input\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  GenericObjectType,\n} from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    disabled,\n    formContext,\n    id,\n    onBlur,\n    onChange,\n    onFocus,\n    options,\n    placeholder,\n    readonly,\n    value,\n  } = props;\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const emptyValue = options.emptyValue || \"\";\n\n  const handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) =>\n    onChange(target.value === \"\" ? emptyValue : target.value);\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(id, target.value);\n\n  const handleFocus = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onFocus(id, target.value);\n\n  return (\n    <Input.Password\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      id={id}\n      name={id}\n      onBlur={!readonly ? handleBlur : undefined}\n      onChange={!readonly ? handleChange : undefined}\n      onFocus={!readonly ? handleFocus : undefined}\n      placeholder={placeholder}\n      value={value || \"\"}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n","import React from \"react\";\nimport Radio, { RadioChangeEvent } from \"antd/lib/radio\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RadioWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  autofocus,\n  disabled,\n  formContext,\n  id,\n  onBlur,\n  onChange,\n  onFocus,\n  options,\n  readonly,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const { enumOptions, enumDisabled, emptyValue } = options;\n\n  const handleChange = ({ target: { value: nextValue } }: RadioChangeEvent) =>\n    onChange(enumOptionsValueForIndex<S>(nextValue, enumOptions, emptyValue));\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(\n      id,\n      enumOptionsValueForIndex<S>(target.value, enumOptions, emptyValue)\n    );\n\n  const handleFocus = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onFocus(\n      id,\n      enumOptionsValueForIndex<S>(target.value, enumOptions, emptyValue)\n    );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(\n    value,\n    enumOptions\n  ) as string;\n\n  return (\n    <Radio.Group\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      id={id}\n      name={id}\n      onChange={!readonly ? handleChange : undefined}\n      onBlur={!readonly ? handleBlur : undefined}\n      onFocus={!readonly ? handleFocus : undefined}\n      value={selectedIndexes}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => (\n          <Radio\n            id={optionId(id, i)}\n            name={id}\n            autoFocus={i === 0 ? autofocus : false}\n            disabled={\n              Array.isArray(enumDisabled) && enumDisabled.indexOf(value) !== -1\n            }\n            key={i}\n            value={String(i)}\n          >\n            {option.label}\n          </Radio>\n        ))}\n    </Radio.Group>\n  );\n}\n","import React from \"react\";\nimport Slider from \"antd/lib/slider\";\nimport {\n  ariaDescribedByIds,\n  rangeSpec,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  GenericObjectType,\n} from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    autofocus,\n    disabled,\n    formContext,\n    id,\n    onBlur,\n    onChange,\n    onFocus,\n    options,\n    placeholder,\n    readonly,\n    schema,\n    value,\n  } = props;\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const { min, max, step } = rangeSpec(schema);\n\n  const emptyValue = options.emptyValue || \"\";\n\n  const handleChange = (nextValue: any) =>\n    onChange(nextValue === \"\" ? emptyValue : nextValue);\n\n  const handleBlur = () => onBlur(id, value);\n\n  const handleFocus = () => onFocus(id, value);\n\n  // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,\n  // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors\n  const extraProps = {\n    placeholder,\n    onBlur: !readonly ? handleBlur : undefined,\n    onFocus: !readonly ? handleFocus : undefined,\n  };\n\n  return (\n    <Slider\n      autoFocus={autofocus}\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      id={id}\n      max={max}\n      min={min}\n      onChange={!readonly ? handleChange : undefined}\n      range={false}\n      step={step}\n      value={value}\n      {...extraProps}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n","import React from \"react\";\nimport Select, { DefaultOptionType } from \"antd/lib/select\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport isString from \"lodash/isString\";\n\nconst SELECT_STYLE = {\n  width: \"100%\",\n};\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function SelectWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  autofocus,\n  disabled,\n  formContext = {} as F,\n  id,\n  multiple,\n  onBlur,\n  onChange,\n  onFocus,\n  options,\n  placeholder,\n  readonly,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const { enumOptions, enumDisabled, emptyValue } = options;\n\n  const handleChange = (nextValue: any) =>\n    onChange(enumOptionsValueForIndex<S>(nextValue, enumOptions, emptyValue));\n\n  const handleBlur = () =>\n    onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n\n  const handleFocus = () =>\n    onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n\n  const filterOption = (input: string, option?: DefaultOptionType) => {\n    if (option && isString(option.label)) {\n      // labels are strings in this context\n      return option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    }\n    return false;\n  };\n\n  const getPopupContainer = (node: any) => node.parentNode;\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(\n    value,\n    enumOptions,\n    multiple\n  );\n\n  // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,\n  // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors\n  const extraProps = {\n    name: id,\n  };\n  return (\n    <Select\n      autoFocus={autofocus}\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      getPopupContainer={getPopupContainer}\n      id={id}\n      mode={typeof multiple !== \"undefined\" ? \"multiple\" : undefined}\n      onBlur={!readonly ? handleBlur : undefined}\n      onChange={!readonly ? handleChange : undefined}\n      onFocus={!readonly ? handleFocus : undefined}\n      placeholder={placeholder}\n      style={SELECT_STYLE}\n      value={selectedIndexes}\n      {...extraProps}\n      filterOption={filterOption}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value: optionValue, label: optionLabel }, index) => (\n          <Select.Option\n            disabled={\n              Array.isArray(enumDisabled) &&\n              enumDisabled.indexOf(optionValue) !== -1\n            }\n            key={String(index)}\n            value={String(index)}\n          >\n            {optionLabel}\n          </Select.Option>\n        ))}\n    </Select>\n  );\n}\n","import React from \"react\";\nimport Input from \"antd/lib/input\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nconst INPUT_STYLE = {\n  width: \"100%\",\n};\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  disabled,\n  formContext,\n  id,\n  onBlur,\n  onChange,\n  onFocus,\n  options,\n  placeholder,\n  readonly,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { readonlyAsDisabled = true } = formContext as GenericObjectType;\n\n  const handleChange = ({ target }: React.ChangeEvent<HTMLTextAreaElement>) =>\n    onChange(target.value === \"\" ? options.emptyValue : target.value);\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLTextAreaElement>) =>\n    onBlur(id, target.value);\n\n  const handleFocus = ({ target }: React.FocusEvent<HTMLTextAreaElement>) =>\n    onFocus(id, target.value);\n\n  // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,\n  // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors\n  const extraProps = {\n    type: \"textarea\",\n  };\n\n  return (\n    <Input.TextArea\n      disabled={disabled || (readonlyAsDisabled && readonly)}\n      id={id}\n      name={id}\n      onBlur={!readonly ? handleBlur : undefined}\n      onChange={!readonly ? handleChange : undefined}\n      onFocus={!readonly ? handleFocus : undefined}\n      placeholder={placeholder}\n      rows={options.rows || 4}\n      style={INPUT_STYLE}\n      value={value}\n      {...extraProps}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n","import {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport AltDateWidget from \"./AltDateWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport DateWidget from \"./DateWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\n\nexport function generateWidgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateTimeWidget,\n    AltDateWidget,\n    CheckboxesWidget,\n    CheckboxWidget,\n    DateTimeWidget,\n    DateWidget,\n    PasswordWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextareaWidget,\n  };\n}\n\nexport default generateWidgets();\n","import { ComponentType } from \"react\";\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\nimport { FormProps, ThemeProps, withTheme } from \"@rjsf/core\";\n\nimport Templates, { generateTemplates } from \"./templates\";\nimport Widgets, { generateWidgets } from \"./widgets\";\n\nexport function generateTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): ThemeProps<T, S, F> {\n  return {\n    templates: generateTemplates<T, S, F>(),\n    widgets: generateWidgets<T, S, F>(),\n  };\n}\n\nconst Theme = generateTheme();\n\nexport function generateForm<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): ComponentType<FormProps<T, S, F>> {\n  return withTheme<T, S, F>(generateTheme<T, S, F>());\n}\n\nconst Form = generateForm();\n\nexport { Form, Templates, Theme, Widgets, generateTemplates, generateWidgets };\n\nexport default Form;\n"],"names":["BTN_GRP_STYLE","width","BTN_STYLE","ArrayFieldItemTemplate","props","disabled","hasMoveDown","hasMoveUp","hasRemove","hasToolbar","index","onDropIndexClick","onReorderClick","readonly","registry","uiSchema","_registry$templates$B","templates","ButtonTemplates","MoveDownButton","MoveUpButton","RemoveButton","formContext","_registry$formContext2","_registry$formContext","rowGutter","_registry$formContext3","toolbarAlign","React","createElement","Row","align","key","gutter","Col","flex","children","Button","Group","style","onClick","DESCRIPTION_COL_STYLE","paddingBottom","ArrayFieldTemplate","canAdd","className","idSchema","items","onAddClick","required","schema","title","uiOptions","getUiOptions","ArrayFieldDescriptionTemplate","getTemplate","ArrayFieldTitleTemplate","AddButton","labelAlign","_formContext$labelAli","_formContext$rowGutte","ConfigConsumer","configProps","labelClsBasic","getPrefixCls","labelColClassName","classNames","id","$id","span","description","map","_ref","itemProps","_objectWithoutPropertiesLoose","_excluded","_extends","justify","INPUT_STYLE","BaseInputTemplate","onBlur","onChange","onFocus","options","placeholder","value","inputProps","getInputProps","type","readonlyAsDisabled","_formContext$readonly","handleBlur","_ref2","target","handleFocus","_ref3","input","InputNumber","name","undefined","nextValue","list","examples","examplesId","ariaDescribedByIds","Input","emptyValue","Fragment","Array","isArray","concat","includes","example","DescriptionField","ErrorList","Alert","List","size","errors","error","Item","Space","ExclamationCircleOutlined","stack","message","IconButton","iconType","_props$iconType","icon","otherProps","block","PlusCircleOutlined","ArrowDownOutlined","ArrowUpOutlined","danger","DeleteOutlined","FieldErrorTemplate","_props$errors","length","errorId","VERTICAL_LABEL_COL","VERTICAL_WRAPPER_COL","FieldTemplate","displayLabel","help","hidden","label","onDropPropertyClick","onKeyChange","rawErrors","rawDescription","rawHelp","colon","_formContext$labelCol","labelCol","_formContext$wrapperC","wrapperCol","wrapperStyle","WrapIfAdditionalTemplate","Form","extra","hasFeedback","htmlFor","validateStatus","ObjectFieldTemplate","formData","properties","TitleFieldTemplate","DescriptionFieldTemplate","colSpan","_formContext$colSpan","findUiSchema","element","content","calculateColSpan","findSchema","findSchemaType","field","findUiSchemaField","widget","findUiSchemaWidget","defaultColSpan","isObject","colSpanObj","isString","isNumber","titleId","descriptionId","filter","e","canExpand","SubmitButton","getSubmitButtonOptions","submitText","norender","htmlType","TitleField","_formContext$colon","labelChildren","trim","replace","handleLabelClick","control","document","querySelector","focus","_classNames","prefixCls","labelClassName","_extends2","_registry$formContext4","_registry$formContext5","_registry$formContext6","keyLabel","ADDITIONAL_PROPERTY_FLAG","buttonUiOptions","UI_OPTIONS_KEY","defaultValue","generateTemplates","ErrorListTemplate","index$1","rangeOptions","start","stop","i","push","pad","AltDateWidget","autofocus","showTime","SelectWidget","widgets","useState","parseDateString","state","_useState","setState","useEffect","handleChange","property","nextState","Object","values","every","readyForChange","toDateString","Math","floor","time","yearsRange","Date","getFullYear","data","range","year","month","day","hour","minute","second","dateElementProps","elemProps","elemId","elemValue","select","enumOptions","renderDateElement","hideNowButton","event","preventDefault","toJSON","hideClearButton","AltDateTimeWidget","CheckboxesWidget","enumDisabled","inline","extraProps","enumOptionsValueForIndex","selectedIndexes","enumOptionsIndexForValue","Checkbox","option","optionId","autoFocus","indexOf","String","CheckboxWidget","checked","defaultProps","_AltDateWidget","DatePicker","generatePicker","dayjsGenerateConfig","DATE_PICKER_STYLE","DateTimeWidget","getPopupContainer","node","parentNode","toISOString","dayjs","DateWidget","format","PasswordWidget","Password","RadioWidget","Radio","_ref4","RangeWidget","rangeSpec","Slider","max","min","step","SELECT_STYLE","_ref$formContext","multiple","Select","mode","filterOption","toLowerCase","optionValue","optionLabel","Option","TextareaWidget","TextArea","rows","generateWidgets","generateTheme","Theme","generateForm","withTheme"],"mappings":"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"}