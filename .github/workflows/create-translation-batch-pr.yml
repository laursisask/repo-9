env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
jobs:
  create-translation-batch:
    name: Create translation batch
    runs-on: ubuntu-latest
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      id: set-branch
      name: Set branch name
      run: 'echo "::set-output name=BRANCH_NAME::translation-batch-${{ matrix.language
        }}-$(date +%Y-%m-%d__%H-%M)"

        '
    - continue-on-error: true
      run: git config --global user.name "docubot"
    - continue-on-error: true
      run: git config --global user.email "67483024+docubot@users.noreply.github.com"
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748
      with:
        fetch-depth: 0
        lfs: true
    - continue-on-error: true
      run: git checkout -b ${{ steps.set-branch.outputs.BRANCH_NAME }}
    - continue-on-error: true
      name: Remove unwanted git hooks
      run: rm .git/hooks/post-checkout
    - continue-on-error: true
      name: Download and install the public signing key
      run: wget -qO - https://artifacts.crowdin.com/repo/GPG-KEY-crowdin | sudo apt-key
        add -
    - continue-on-error: true
      name: Create the crowdin.list file in the /etc/apt/sources.list.d directory
      run: 'sudo touch /etc/apt/sources.list.d/crowdin.list

        echo "deb https://artifacts.crowdin.com/repo/deb/ /" | sudo tee -a /etc/apt/sources.list.d/crowdin.list

        '
    - continue-on-error: true
      name: Install the Crowdin CLI Debian Package
      run: sudo apt-get update && sudo apt-get install crowdin3
    - continue-on-error: true
      name: Remove empty source files
      run: 'find content -type f -empty -delete

        find data    -type f -empty -delete

        '
    - continue-on-error: true
      env:
        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
      name: Upload files to crowdin
      run: crowdin upload sources --delete-obsolete --no-progress --no-colors --verbose
        --debug '--branch=main' '--config=crowdin.yml'
    - continue-on-error: true
      name: Remove all language translations
      run: 'git rm -rf --quiet ${{ matrix.language_dir }}/content

        git rm -rf --quiet ${{ matrix.language_dir }}/data

        '
    - continue-on-error: true
      env:
        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
      name: Download crowdin translations
      run: crowdin download  --no-progress --no-colors --verbose --debug '--branch=main'
        '--config=crowdin.yml' --language=${{ matrix.crowdin_language }}
    - continue-on-error: true
      name: Commit crowdin sync
      run: 'git add ${{ matrix.language_dir }}

        git commit -m "Add crowdin translations" || echo "Nothing to commit"

        '
    - continue-on-error: true
      name: Setup node
      uses: actions/setup-node@1f8c6b94b26d0feae1e387ca63ccbdc44d27b561
      with:
        node-version: 16.14.x
    - continue-on-error: true
      run: npm ci
    - continue-on-error: true
      name: Homogenize frontmatter
      run: 'node script/i18n/homogenize-frontmatter.js

        git add ${{ matrix.language_dir }} && git commit -m "Run script/i18n/homogenize-frontmatter.js"
        || echo "Nothing to commit"

        '
    - continue-on-error: true
      name: Fix translation errors
      run: 'node script/i18n/fix-translation-errors.js

        git add ${{ matrix.language_dir }} && git commit -m "Run script/i18n/fix-translation-errors.js"
        || echo "Nothing to commit"

        '
    - continue-on-error: true
      name: Check parsing
      run: 'node script/i18n/lint-translation-files.js --check parsing | tee -a /tmp/batch.log
        | cat

        git add ${{ matrix.language_dir }} && git commit -m "Run script/i18n/lint-translation-files.js
        --check parsing" || echo "Nothing to commit"

        '
    - continue-on-error: true
      name: Check rendering
      run: 'node script/i18n/lint-translation-files.js --check rendering | tee -a
        /tmp/batch.log | cat

        git add ${{ matrix.language_dir }} && git commit -m "Run script/i18n/lint-translation-files.js
        --check rendering" || echo "Nothing to commit"

        '
    - continue-on-error: true
      name: Reset files with broken liquid tags
      run: 'node script/i18n/reset-files-with-broken-liquid-tags.js --language=${{
        matrix.language }} | tee -a /tmp/batch.log | cat

        git add ${{ matrix.language_dir }} && git commit -m "run script/i18n/reset-files-with-broken-liquid-tags.js
        --language=${{ matrix.language }}" || echo "Nothing to commit"

        '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.DOCUBOT_REPO_PAT }}
      name: Reset known broken files
      run: 'node script/i18n/reset-known-broken-translation-files.js | tee -a /tmp/batch.log
        | cat

        git add ${{ matrix.language_dir }} && git commit -m "run script/i18n/reset-known-broken-translation-files.js"
        || echo "Nothing to commit"

        '
    - continue-on-error: true
      name: Check in CSV report
      run: 'mkdir -p translations/log

        csvFile=translations/log/${{ matrix.language }}-resets.csv

        script/i18n/report-reset-files.js --report-type=csv --language=${{ matrix.language
        }} --log-file=/tmp/batch.log > $csvFile

        git add -f $csvFile && git commit -m "Check in ${{ matrix.language }} CSV
        report" || echo "Nothing to commit"

        '
    - continue-on-error: true
      name: Write the reported files that were reset to /tmp/pr-body.txt
      run: script/i18n/report-reset-files.js --report-type=pull-request-body --language=${{
        matrix.language }} --log-file=/tmp/batch.log > /tmp/pr-body.txt
    - continue-on-error: true
      name: Push filtered translations
      run: git push origin ${{ steps.set-branch.outputs.BRANCH_NAME }}
    - continue-on-error: true
      name: Close existing stale batches
      uses: lee-dohm/close-matching-issues@e9e43aad2fa6f06a058cedfd8fb975fd93b56d8f
      with:
        query: type:pr label:translation-batch-${{ matrix.language }}
        token: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
    - continue-on-error: true
      env:
        BASE: main
        BODY_FILE: /tmp/pr-body.txt
        GITHUB_TOKEN: ${{ secrets.DOCUBOT_REPO_PAT }}
        HEAD: ${{ steps.set-branch.outputs.BRANCH_NAME }}
        LANGUAGE: ${{ matrix.language }}
        TITLE: New translation batch for ${{ matrix.language }}
      name: Create translation batch pull request
      run: .github/actions-scripts/create-translation-batch-pr.js
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
      if: github.ref_name == 'main'
      name: Approve PR
      run: gh pr review --approve || echo "Nothing to approve"
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.OCTOMERGER_PAT_WITH_REPO_AND_WORKFLOW_SCOPE }}
      if: github.ref_name == 'main'
      name: Set auto-merge
      run: gh pr merge ${{ steps.set-branch.outputs.BRANCH_NAME }} --auto --squash
        || echo "Nothing to merge"
    - continue-on-error: true
      if: cancelled()
      name: Send Slack notification if workflow is cancelled
      uses: someimportantcompany/github-actions-slack-message@f8d28715e7b8a4717047d23f48c39827cacad340
      with:
        bot-token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}
        channel: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
        color: failure
        text: The new translation batch for ${{ matrix.language }} was cancelled.
    - continue-on-error: true
      if: failure()
      name: Send Slack notification if workflow failed
      uses: someimportantcompany/github-actions-slack-message@f8d28715e7b8a4717047d23f48c39827cacad340
      with:
        bot-token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}
        channel: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
        color: failure
        text: The new translation batch for ${{ matrix.language }} failed.
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid2/youssefhealthylifestyle/docs.$(date
        +%s)
    strategy:
      fail-fast: false
      matrix:
        include:
        - crowdin_language: pt-BR
          language: pt
          language_dir: translations/pt-BR
        - crowdin_language: es-ES
          language: es
          language_dir: translations/es-ES
        - crowdin_language: zh-CN
          language: cn
          language_dir: translations/zh-CN
        - crowdin_language: ja
          language: ja
          language_dir: translations/ja-JP
      max-parallel: 1
    timeout-minutes: 60
name: Create translation Batch Pull Request
'on':
  workflow_dispatch: {}
permissions:
  contents: write
